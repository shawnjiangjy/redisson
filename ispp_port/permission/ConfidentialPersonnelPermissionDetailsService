/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl;

import com.huawei.it.jalor5.core.annotation.JalorOperation;
import com.huawei.it.jalor5.core.annotation.JalorResource;
import com.huawei.it.jalor5.core.base.PageVO;
import com.huawei.it.jalor5.core.base.PagedResult;
import com.huawei.it.jalor5.core.util.CollectionUtil;
import com.huawei.it.jalor5.core.util.StringUtil;
import com.huawei.it.occsafe.dao.IConfidentialPersonnelPermissionDetailsDao;
import com.huawei.it.occsafe.dao.ISelectOptionConfigDao;
import com.huawei.it.occsafe.enums.ConfidentialStandardEnum;
import com.huawei.it.occsafe.service.IConfidentialPersonnelPermissionDetailsService;
import com.huawei.it.occsafe.service.IMessagePushService;
import com.huawei.it.occsafe.service.emp.IEmployeeService;
import com.huawei.it.occsafe.util.LogUtil;
import com.huawei.it.occsafe.util.UserUtil;
import com.huawei.it.occsafe.vo.ConfidentialPersonnelPermissionDetailsVO;
import com.huawei.it.occsafe.vo.ConfidentialPersonnelPermissionStandardVO;
import com.huawei.it.occsafe.vo.ResultVo;
import com.huawei.it.occsafe.vo.SelectOptionConfigVO;

import com.alibaba.fastjson.JSON;

import org.apache.commons.collections4.CollectionUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.inject.Named;

/**
 * @author pWX814460
 * @description ConfidentialPersonnelPermissionDetailsService.
 * @create 2022/3/14 14:31
 * @since 2022/3/14 14:31
 */
@Named
@JalorResource(code = "Occ.ConfidentialDetail", desc = "机要人员权限审视")
public class ConfidentialPersonnelPermissionDetailsService implements IConfidentialPersonnelPermissionDetailsService {
    /**
     * 默认非删除状态
     */
    private static final String USED = "N";

    /**
     * 机要人员审视通知主管推送类型
     */
    private static final String NOTICE_PUSH_TYPE = "17";

    @Inject
    private IConfidentialPersonnelPermissionDetailsDao confidentialPersonnelPermissionDetailsDao;

    @Inject
    private ISelectOptionConfigDao selectOptionConfigDao;

    @Inject
    private IMessagePushService messagePushService;

    @Inject
    private IEmployeeService employeeService;

    @Override
    @JalorOperation(code = "query", desc = "查询机要人员权限审视列表")
    public PagedResult<ConfidentialPersonnelPermissionDetailsVO> query(String params, int pageSize, int curPage) {
        PageVO pageVO = new PageVO();
        pageVO.setCurPage(curPage);
        pageVO.setPageSize(pageSize);
        try {
                ConfidentialPersonnelPermissionDetailsVO request = JSON.parseObject(params,
                ConfidentialPersonnelPermissionDetailsVO.class);
            request.setEmployeeNumber(StringUtil.isNullOrEmpty(request.getEmployeeNumber())
                ? ""
                : request.getEmployeeNumber().toUpperCase(Locale.ROOT));
            request.setBusinessDirector(StringUtil.isNullOrEmpty(request.getBusinessDirector())
                ? ""
                : request.getBusinessDirector().toLowerCase(Locale.ROOT));
            request.setDeleteFlag(USED);
            PagedResult<ConfidentialPersonnelPermissionDetailsVO> query
                = confidentialPersonnelPermissionDetailsDao.query(request, pageVO);
            List<ConfidentialPersonnelPermissionDetailsVO> result = query.getResult();
            // 查询配置基线值
            baseline(result);
            return query;
        } catch (Exception exception) {
            LogUtil.error("ConfidentialPersonnelPermissionDetailsService query error!", exception);
            return new PagedResult<>();
        }
    }

    private void baseline(List<ConfidentialPersonnelPermissionDetailsVO> result) {
        SelectOptionConfigVO selectOptionConfigVO = new SelectOptionConfigVO();
        selectOptionConfigVO.setModule("confidentialAccessReview");
        selectOptionConfigVO.setSubModule("baseline");
        List<SelectOptionConfigVO> config = selectOptionConfigDao.findConfig(selectOptionConfigVO);
        if (!CollectionUtil.isNullOrEmpty(config)) {
            Map<String, List<SelectOptionConfigVO>> valueMap = config.stream()
                .collect(Collectors.groupingBy(SelectOptionConfigVO::getValue));
            result.stream().forEach(cvo -> {
                ConfidentialPersonnelPermissionStandardVO csvo = new ConfidentialPersonnelPermissionStandardVO();
                csvo.setCdBomBurnPermissionStandard(
                    standard(valueMap, ConfidentialStandardEnum.CD_BOM_BURN_PERMISSION_STANDARD.getCode(),
                        cvo.getCdBomBurnPermission()));
                csvo.setEmailSendingPermissionStandard(
                    standard(valueMap, ConfidentialStandardEnum.EMAIL_SENDING_PERMISSION_STANDARD.getCode(),
                        cvo.getEmailSendingPermission()));
                String usbUnencryptedWritePermission = cvo.getUsbUnencryptedWritePermission();
                Boolean[] booleans = getBooleans(valueMap, usbUnencryptedWritePermission,ConfidentialStandardEnum.USB_UNENCRYPTED_WRITE_PERMISSION_STANDARD.getCode());
                csvo.setUsbUnencryptedWritePermissionStandard(booleans);

                String proxyPermission = cvo.getProxyPermission();
                Boolean[] booleansP = getBooleans(valueMap, proxyPermission,ConfidentialStandardEnum.PROXY_PERMISSION_STANDARD.getCode());
                csvo.setProxyPermissionStandard(booleansP);

                csvo.setMobileAttachPermissionStandard(
                    standard(valueMap, ConfidentialStandardEnum.MOBILE_ATTACH_PERMISSION_STANDARD.getCode(),
                        cvo.getMobileAttachPermission()));
                csvo.setMobileEmailPermissionStandard(
                    standard(valueMap, ConfidentialStandardEnum.MOBILE_EMAIL_PERMISSION_STANDARD.getCode(),
                        cvo.getMobileEmailPermission()));
                csvo.setWelinkMediaPermissionStandard(
                    standard(valueMap, ConfidentialStandardEnum.WELINK_MEDIA_PERMISSION_STANDARD.getCode(),
                        cvo.getWelinkMediaPermission()));
                csvo.setDisableCloudDiskPermissionsStandard(
                    standard(valueMap, ConfidentialStandardEnum.DISABLE_CLOUD_DISK_PERMISSIONS_STANDARD.getCode(),
                        cvo.getDisableCloudDiskPermissions()));
                cvo.setStandard(csvo);
            });
        }
    }

    private Boolean[] getBooleans(Map<String, List<SelectOptionConfigVO>> valueMap,
        String usbUnencryptedWritePermission,String code) {
        List<String> usbList = Arrays.asList(usbUnencryptedWritePermission.split(","));
        List<Boolean> usbStandList = new ArrayList<>();
        usbList.stream().forEach(usb->{
            usbStandList.add(standard(valueMap, code, usb));
        });
        return usbStandList.toArray(new Boolean[] {});
    }

    @Override
    @JalorOperation(code = "queryCurrent", desc = "查询机要人员权限审视")
    public ResultVo<ConfidentialPersonnelPermissionDetailsVO> query(String params) {
        try {
            ConfidentialPersonnelPermissionDetailsVO request = JSON.parseObject(params,
                ConfidentialPersonnelPermissionDetailsVO.class);
            request.setEmployeeNumber(StringUtil.isNullOrEmpty(request.getEmployeeNumber())
                ? ""
                : request.getEmployeeNumber().toUpperCase(Locale.ROOT));
            // 需要兼容新旧工号
            if (StringUtil.isNullOrEmpty(request.getCurrentDealer())) {
                String userInfo = UserUtil.getUserInfo();
                request.setCurrentDealer(userInfo.toLowerCase(Locale.ROOT));
            } else {
                request.setCurrentDealer(request.getCurrentDealer().toLowerCase(Locale.ROOT));
            }
            List<String> tracingList = employeeService.empTracing(request.getCurrentDealer(), 0);
            request.setCurrentDealer(String.join(",", tracingList).toLowerCase(Locale.ROOT));
            request.setDeleteFlag(USED);
            List<ConfidentialPersonnelPermissionDetailsVO> query
                = confidentialPersonnelPermissionDetailsDao.queryCurrent(request);
            // 查询配置基线值
            baseline(query);
            return new ResultVo(true, query, "success");
        } catch (Exception exception) {
            LogUtil.error("ConfidentialPersonnelPermissionDetailsService queryCurrent error!", exception);
            return new ResultVo<>(false);
        }
    }

    private boolean standard(Map<String, List<SelectOptionConfigVO>> valueMap, String code, String ele) {
        List<SelectOptionConfigVO> selectOptionConfigVOS = valueMap.get(code);
        if (CollectionUtil.isNullOrEmpty(selectOptionConfigVOS)) {
            return false;
        }
        Set<String> collect = selectOptionConfigVOS.stream()
            .map(SelectOptionConfigVO::getSubValue)
            .collect(Collectors.toSet());
        return collect.contains(ele);
    }

    @Override
    @JalorOperation(code = "batchSave", desc = "批量保存或者更新")
    public ResultVo<ConfidentialPersonnelPermissionDetailsVO> batchSave(
        List<ConfidentialPersonnelPermissionDetailsVO> datas) {
        if (CollectionUtils.isEmpty(datas)) {
            return new ResultVo(false, "error", "empty data!");
        }
        try {
            List<ConfidentialPersonnelPermissionDetailsVO> filledIds = datas.stream()
                .filter(item -> item.getId() > 0)
                .collect(Collectors.toList());
            if (!CollectionUtils.isEmpty(filledIds)) {
                // 有效id查询，如果是导入的时候无意修改了id或者添加了id，此时为不合法id,按照新增处理。
                List<ConfidentialPersonnelPermissionDetailsVO> effectiveResult
                    = confidentialPersonnelPermissionDetailsDao.queryBatchIds(datas);
                List<Integer> effectiveIds = effectiveResult.stream()
                    .map(ConfidentialPersonnelPermissionDetailsVO::getId)
                    .collect(Collectors.toList());
                datas.stream().forEach(item -> {
                    // 无效的id设置为空
                    if (!effectiveIds.contains(item.getId())) {
                        item.setId(0);
                    }
                });
            }
            datas.stream().forEach(item -> {
                // 按照ispp工程规范 工号大写，域账号小写
                String employeeNumber = item.getEmployeeNumber();
                String businessDirector = item.getBusinessDirector();
                item.setEmployeeNumber(StringUtil.isNullOrEmpty(employeeNumber)
                    ? employeeNumber
                    : employeeNumber.toUpperCase(Locale.ROOT));
                item.setBusinessDirector(StringUtil.isNullOrEmpty(businessDirector)
                    ? businessDirector
                    : businessDirector.toLowerCase(Locale.ROOT));
            });
            // 根据工号获取姓名和部门
            confidentialPersonnelPermissionDetailsDao.batchSaveOrUpdate(datas);
            return new ResultVo(true);
        } catch (Exception exception) {
            LogUtil.error("ConfidentialPersonnelPermissionDetailsService save error!", exception);
            return new ResultVo(false, "error", exception.getMessage());
        }
    }

    @Override
    @JalorOperation(code = "delete", desc = "软删除数据")
    public ResultVo<ConfidentialPersonnelPermissionDetailsVO> delete(int id) {
        try {
            confidentialPersonnelPermissionDetailsDao.delete(new ConfidentialPersonnelPermissionDetailsVO(id));
            return new ResultVo(true);
        } catch (Exception exception) {
            LogUtil.error("ConfidentialPersonnelPermissionDetailsService delete error!", exception);
            return new ResultVo(false, "error", exception.getMessage());
        }
    }

    @Override
    @JalorOperation(code = "noticeBusinessDirecor", desc = "通知机要人员主管审视权限")
    public ResultVo noticeBusinessDirecor(List<ConfidentialPersonnelPermissionDetailsVO> datas) {
        if (CollectionUtil.isNullOrEmpty(datas)) {
            return new ResultVo(true);
        }
        try {
            // 直接主管列表，为w3账号格式数据
            List<String> sendList = datas.stream()
                .map(ConfidentialPersonnelPermissionDetailsVO::getBusinessDirector)
                .distinct()
                .collect(Collectors.toList());
            // 发送应用号，
            messagePushService.push(String.join(",", sendList), "MessageTemplate", "notice", NOTICE_PUSH_TYPE);
            // 修改审视状态为待审视，当前处理人修改为直接主管
            datas.stream().forEach(item -> {
                // 按照ispp工程规范 工号大写，域账号小写
                String employeeNumber = item.getEmployeeNumber();
                String businessDirector = item.getBusinessDirector();
                item.setEmployeeNumber(StringUtil.isNullOrEmpty(employeeNumber)
                    ? employeeNumber
                    : employeeNumber.toUpperCase(Locale.ROOT));
                item.setBusinessDirector(StringUtil.isNullOrEmpty(businessDirector)
                    ? businessDirector
                    : businessDirector.toLowerCase(Locale.ROOT));
                item.setReviewStatus("1");
                item.setCurrentDealer(item.getBusinessDirector());
            });
            confidentialPersonnelPermissionDetailsDao.batchSaveOrUpdate(datas);
            return new ResultVo(true);
        } catch (Exception exception) {
            LogUtil.error("ConfidentialPersonnelPermissionDetailsService noticeBusinessDirecor error!", exception);
            return new ResultVo(false, "error", exception.getMessage());
        }
    }

    @Override
    @JalorOperation(code = "dispatchTo", desc = "转派处理")
    public ResultVo dispatchTo(List<ConfidentialPersonnelPermissionDetailsVO> datas) {
        if (CollectionUtil.isNullOrEmpty(datas)) {
            return new ResultVo(true);
        }
        List<String> sendList = datas.stream()
            .map(ConfidentialPersonnelPermissionDetailsVO::getCurrentDealer)
            .distinct()
            .collect(Collectors.toList());
        try {
            messagePushService.push(String.join(",", sendList), "MessageTemplate", "notice", NOTICE_PUSH_TYPE);
            confidentialPersonnelPermissionDetailsDao.batchSaveOrUpdate(datas);
            return new ResultVo(true);
        } catch (Exception exception) {
            LogUtil.error("ConfidentialPersonnelPermissionDetailsService dispatchTo error!", exception);
            return new ResultVo(false, "error", exception.getMessage());
        }
    }

    @Override
    @JalorOperation(code = "getConfigs", desc = "获取机要人员权限新增编辑下拉选项")
    public ResultVo getConfigs() {
        try {
            SelectOptionConfigVO svo = new SelectOptionConfigVO();
            svo.setModule("confidentialAccessReview");
            List<SelectOptionConfigVO> config = selectOptionConfigDao.findConfig(svo);
            Map<String, List<SelectOptionConfigVO>> collect = new HashMap<>();
            if (CollectionUtil.isNullOrEmpty(config)) {
                return new ResultVo(true, collect, "success");
            }
            collect = config.stream()
                .filter(item -> !StringUtil.isNullOrEmpty(item.getSubModule()))
                .collect(Collectors.groupingBy(SelectOptionConfigVO::getSubModule));
            return new ResultVo(true, collect, "success");
        } catch (Exception exception) {
            LogUtil.error("ConfidentialPersonnelPermissionDetailsService getConfigs error!", exception);
            return new ResultVo(false, "error", exception.getMessage());
        }
    }

    /**
     * 获取审视周期
     *
     * @return 结果
     */
    @Override
    @JalorOperation(code = "getReviewPeriod", desc = "获取审视周期")
    public ResultVo getReviewPeriod() {
        List<ConfidentialPersonnelPermissionDetailsVO> data = confidentialPersonnelPermissionDetailsDao.getReviewPeriod();
        return new ResultVo(true, data, "success");
    }
}
