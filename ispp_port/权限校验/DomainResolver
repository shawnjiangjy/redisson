//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.huawei.it.jalor5.web.support.internal.impl;

import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;
import com.huawei.it.jalor5.core.request.impl.RequestContext;
import com.huawei.it.jalor5.core.request.impl.RequestContextManager;
import com.huawei.it.jalor5.core.spring.etc.ConfigPropertiesHolder;
import com.huawei.it.jalor5.core.util.StringUtil;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.servlet.http.HttpServletRequest;
import org.springframework.util.StringUtils;

public class DomainResolver {
    private static final ILogger LOGGER = JalorLoggerFactory.getLogger(DomainResolver.class);
    private static final String TOP_LEVEL_DOMAINS = "com,cn,org,TrademarkClearingHouse,in,net,cc,eu,mobi,company,asia,xxx,global,pt,us,de,cloud,hk,lt,fr,cz,es,ch,at,mx,it,info,tel,be,co,uk,uz,top,tr,ec,app,sg,ru,hn,il,pe,ro,mk,nl,md,biz,td,ca,ai,ae,swiss,io,ph,kg,vn,zj,dk,tw,tz,al,bi,tt,np,py,ni,sa,kw,bz,id,cl,fm,no,cm,bh,ml,cf,ps,dz,ug,mu,tm,fi,ng,rs,cd,sm,ao,bw,si,web,br,pa,gt,zm,mg,do,cr,ma,my,rw,sv,bo,lk,gh,et,sd,ge,cu,qa,eg,design,tg,ly,as,nz,ci,ws,za,jp,af,tj,li,dev,lv,lu,se,mt,ba,om,ee,sk,hr,gr,ie,mm,emp,tn,am,link,au,mn,la,bd,gy,ir,pl,ke,jo,uy,sy,hu,lat,bg,ua,na,xyz,pk,mo,ve,kh,africa,by,world,mz,th,kr,bn,email,ar,az,tech,tv,jm,kz,mw,is,cq,bj,cg,auto";
    private static final Set TOP_DOMAIN_SET = new LinkedHashSet(Arrays.asList("com,cn,org,TrademarkClearingHouse,in,net,cc,eu,mobi,company,asia,xxx,global,pt,us,de,cloud,hk,lt,fr,cz,es,ch,at,mx,it,info,tel,be,co,uk,uz,top,tr,ec,app,sg,ru,hn,il,pe,ro,mk,nl,md,biz,td,ca,ai,ae,swiss,io,ph,kg,vn,zj,dk,tw,tz,al,bi,tt,np,py,ni,sa,kw,bz,id,cl,fm,no,cm,bh,ml,cf,ps,dz,ug,mu,tm,fi,ng,rs,cd,sm,ao,bw,si,web,br,pa,gt,zm,mg,do,cr,ma,my,rw,sv,bo,lk,gh,et,sd,ge,cu,qa,eg,design,tg,ly,as,nz,ci,ws,za,jp,af,tj,li,dev,lv,lu,se,mt,ba,om,ee,sk,hr,gr,ie,mm,emp,tn,am,link,au,mn,la,bd,gy,ir,pl,ke,jo,uy,sy,hu,lat,bg,ua,na,xyz,pk,mo,ve,kh,africa,by,world,mz,th,kr,bn,email,ar,az,tech,tv,jm,kz,mw,is,cq,bj,cg,auto".split(",")));
    private static Set<String> extendTopDomainSet = null;

    public DomainResolver() {
    }

    private static Set<String> getExtendTopDomains() {
        if (extendTopDomainSet == null) {
            String configKey = ConfigPropertiesHolder.getContextProperty("jalor.custom.top-level.domains");
            if (StringUtils.hasText(configKey)) {
                extendTopDomainSet = new LinkedHashSet(Arrays.asList(configKey.split(",")));
            } else {
                extendTopDomainSet = new LinkedHashSet();
            }
        }

        return extendTopDomainSet;
    }

    public static String getCurrentDomain() {
        RequestContext requestContext = (RequestContext)RequestContextManager.getCurrent(true);
        return requestContext != null ? (String)requestContext.getItem("CURRENT_DOMAIN") : null;
    }

    public static String getCurrentDomain(HttpServletRequest request) {
        String rawDomain = request.getHeader("x-forwarded-host");
        String host;
        if (StringUtils.hasText(rawDomain)) {
            host = getDomainByHost(rawDomain);
            if (host != null) {
                return host;
            }
        }

        rawDomain = request.getHeader("Origin");
        if (StringUtils.hasText(rawDomain)) {
            host = getDomainByUrl(rawDomain);
            if (host != null) {
                return host;
            }
        }

        rawDomain = request.getHeader("Referer");
        if (StringUtils.hasText(rawDomain)) {
            host = getDomainByUrl(rawDomain);
            if (host != null) {
                return host;
            }
        }

        host = request.getHeader("Host");
        if (StringUtils.hasText(host)) {
            String domain = getDomainByHost(host);
            if (domain != null) {
                return domain;
            }
        }

        return getDefaultDomain();
    }

    public static String getDefaultDomain() {
        String jalorWebDomain = ConfigPropertiesHolder.getContextProperty("jalor.web.domain");
        return StringUtil.isNullOrEmpty(jalorWebDomain) ? "huawei.com" : jalorWebDomain;
    }

    public static String getDomainByUrl(String url) {
        String domain = null;

        try {
            String host = (new URL(url)).getHost();
            return getDomainByHost(host);
        } catch (MalformedURLException var3) {
            LOGGER.error2("Found error when parse url:[{}], err msg : [{}]", new Object[]{url, var3.getMessage()});
            return (String)domain;
        }
    }

    public static String getDomainByHost(String host) {
        try {
            host = host.split(",")[0];
            int endIndex = host.indexOf(":");
            if (endIndex != -1) {
                host = host.substring(0, endIndex);
            }

            String[] hostArray = host.split("\\.");
            int dynamicIndex = 0;
            Set<String> extendTopDomains = getExtendTopDomains();

            for(int i = hostArray.length - 1; i >= 0; --i) {
                if (!TOP_DOMAIN_SET.contains(hostArray[i]) && !extendTopDomains.contains(hostArray[i])) {
                    dynamicIndex = i;
                    break;
                }
            }

            if (dynamicIndex == hostArray.length - 1) {
                return host;
            } else {
                StringBuffer buffer = new StringBuffer();

                for(int i = dynamicIndex; i < hostArray.length; ++i) {
                    if (i < hostArray.length - 1) {
                        buffer.append(hostArray[i]).append(".");
                    } else {
                        buffer.append(hostArray[i]);
                    }
                }

                return buffer.toString();
            }
        } catch (Exception var7) {
            LOGGER.error2("Found error when parse host:[{}], err msg : [{}]", new Object[]{host, var7.getMessage()});
            return null;
        }
    }
}
