//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//  invokeServer() 方法封装了httpclient请求

package com.huawei.it.jalor5.web.support.service.impl;

import com.huawei.his.jalor.helper.HttpsHelper;
import com.huawei.it.jalor5.core.annotation.NoJalorTransation;
import com.huawei.it.jalor5.core.config.ApplicationConfigProperties;
import com.huawei.it.jalor5.core.exception.ApplicationException;
import com.huawei.it.jalor5.core.exception.impl.CommonApplicationException;
import com.huawei.it.jalor5.core.ioc.Jalor;
import com.huawei.it.jalor5.core.ioc.delegate.JalorApplicationContext;
import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;
import com.huawei.it.jalor5.core.server.ServerInfoVO;
import com.huawei.it.jalor5.core.util.CollectionUtil;
import com.huawei.it.jalor5.core.util.HttpUtil;
import com.huawei.it.jalor5.core.util.JsonUtil;
import com.huawei.it.jalor5.security.service.IJwtGenerator;
import com.huawei.it.jalor5.security.util.SecurityUtil;
import com.huawei.it.jalor5.web.support.InvalidParameterException;
import com.huawei.it.jalor5.web.support.service.IClusterInvokeService;
import com.huawei.it.jalor5.web.support.service.IServerManageExtService;
import com.huawei.it.jalor5.web.support.service.IServerManageService;
import com.huawei.secure.filter.LogFilter;
import java.io.IOException;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.inject.Named;
import javax.net.ssl.SSLContext;
import org.apache.hc.client5.http.classic.methods.HttpDelete;
import org.apache.hc.client5.http.classic.methods.HttpGet;
import org.apache.hc.client5.http.classic.methods.HttpPost;
import org.apache.hc.client5.http.classic.methods.HttpPut;
import org.apache.hc.client5.http.classic.methods.HttpUriRequestBase;
import org.apache.hc.client5.http.config.RequestConfig;
import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;
import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;
import org.apache.hc.core5.http.HttpEntity;
import org.apache.hc.core5.http.io.entity.StringEntity;
import org.apache.hc.core5.util.Timeout;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

@Named
public class ClusterInvokeService implements IClusterInvokeService {
    private static final ILogger LOGGER = JalorLoggerFactory.getLogger(ClusterInvokeService.class);
    @Value("${jalor.ssl.hostname.verify.ignore:false}")
    private boolean ignoreHostName;
    @Value("${jalor.internal-token.enabled:true}")
    private boolean internalTokenEnabled;
    @Autowired(
        required = false
    )
    private IJwtGenerator jwtGenerator;

    public ClusterInvokeService() {
    }

    private static void notNull(@Nullable Object object, String message) throws InvalidParameterException {
        if (object == null) {
            throw new InvalidParameterException(message);
        }
    }

    @NoJalorTransation
    public void invoke(String uri, String queryParameters) throws ApplicationException {
        this.invoke(uri, "GET", queryParameters, (Object)null);
    }

    @NoJalorTransation
    public void invoke(String uri, String method, String queryParameters, Object otherParameters) throws ApplicationException {
        notNull(uri, "invoke server uri is null.");
        notNull(method, "invoke server method is null.");
        List<ServerInfoVO> serverList = null;
        JalorApplicationContext context = Jalor.getContext();
        SecurityUtil.skipSecurityCheck();
        if (context.containsBean("serverManageExtService")) {
            IServerManageExtService serverManageExtService = (IServerManageExtService)context.getBean("serverManageExtService", IServerManageExtService.class);
            Assert.notNull(serverManageExtService, "Named with serverManageExtService IServerManageExtService not found!");
            serverList = serverManageExtService.findServerList();
        } else {
            IServerManageService serverListService = (IServerManageService)context.getBean("serverManageService", IServerManageService.class);
            Assert.notNull(serverListService, "Named with serverManageService IServerManageService not found!");
            serverList = serverListService.findServerList();
        }

        if (!CollectionUtil.isNullOrEmpty(serverList)) {
            Map<String, String> failedServerList = new LinkedHashMap(serverList.size());
            Map<String, Object> serverInfoMap = new LinkedHashMap(4);
            serverInfoMap.put("SERVICE_URI", uri);
            serverInfoMap.put("SERVICE_METHOD", method);
            serverInfoMap.put("SERVICE_QUERYPARAMETERS", queryParameters);
            serverInfoMap.put("SERVICE_OTHERPARAMETERS", otherParameters);
            Iterator var9 = serverList.iterator();

            while(var9.hasNext()) {
                ServerInfoVO server = (ServerInfoVO)var9.next();
                this.invokeOneServer(serverInfoMap, failedServerList, server);
            }

            if (!failedServerList.isEmpty()) {
                StringBuilder error = new StringBuilder();
                Iterator var16 = failedServerList.entrySet().iterator();

                while(var16.hasNext()) {
                    Map.Entry<String, String> entry = (Map.Entry)var16.next();
                    String url = "http://" + (((String)entry.getKey()).endsWith("/") ? (String)entry.getKey() : (String)entry.getKey() + "/");
                    error.append(url);
                    error.append(": ");
                    error.append((String)entry.getValue());
                    error.append(".\n");
                }

                throw new CommonApplicationException(this.doStringFilter(error.toString()));
            }
        }
    }

    private String doStringFilter(String str) {
        try {
            return LogFilter.doFilter(str);
        } catch (IOException var3) {
            return "";
        }
    }

    private void invokeOneServer(Map<String, Object> serverInfoMap, Map<String, String> failedServerList, ServerInfoVO server) {
        try {
            LOGGER.debug("Before invoke server:" + server.getServerName() + " for service:" + serverInfoMap.get("SERVICE_URI").toString());
            int statusCode = this.invokeServer(server, serverInfoMap);
            if (!HttpUtil.isNormalResponse(statusCode)) {
                failedServerList.put(server.getServerUrl(), "Server return http code " + statusCode);
            }
        } catch (Exception var5) {
            LOGGER.error(var5);
            failedServerList.put(server.getServerUrl(), var5.getMessage());
        }

    }

    private int invokeServer(ServerInfoVO server, Map<String, Object> serverInfoMap) throws IOException {
        HttpUriRequestBase httpRequestBase = this.getHttpRequestBase(server, serverInfoMap);
        String timeOut = ApplicationConfigProperties.getContextProperty("requestConfig.timeout", "60000");
        RequestConfig requestConfig = RequestConfig.custom().setConnectionRequestTimeout(Timeout.ofMilliseconds(Long.parseLong(timeOut))).setConnectTimeout(Timeout.ofMilliseconds(Long.parseLong(timeOut))).build();
        CloseableHttpClient closeableHttpClient = null;
        CloseableHttpResponse result = null;
        if (httpRequestBase == null) {
            throw new IllegalArgumentException("service method is not in [GET,PUT,POST,DELETE]");
        } else {
            httpRequestBase.setConfig(requestConfig);
            String jalorInternalToken;
            if (this.jwtGenerator != null) {
                jalorInternalToken = this.jwtGenerator.genJwtToken();
                HttpsHelper.addHeader("x-jwt-ms-token", jalorInternalToken, httpRequestBase);
            } else {
                LOGGER.info("The jwtGenerator is null , please add dependence of 'jalor-auth-jwt' !");
            }

            if (this.internalTokenEnabled) {
                jalorInternalToken = SecurityUtil.genInternalToken(server.getAppName());
                HttpsHelper.addHeader("JalorInternalToken", jalorInternalToken, httpRequestBase);
            }

            HttpsHelper.addHeader("x-service-name", "x-service-name", httpRequestBase);
            HttpsHelper.addHeader("x-producer-type", "x-producer-type", httpRequestBase);
            HttpsHelper.addHeader("x-consumer-name", "x-consumer-name", httpRequestBase);
            HttpsHelper.addHeader("x-consumer-ip", "x-consumer-ip", httpRequestBase);
            HttpsHelper.addHeader("Content-Type", "application/json", httpRequestBase);
            HttpsHelper.addHeader("Referer", "http://login.huawei.com/login/", httpRequestBase);

            int var9;
            try {
                HttpClientBuilder builder = HttpClientBuilder.create();
                if (server.getSecurePortEnabled() && this.ignoreHostName) {
                    builder.setConnectionManager(HttpsHelper.getConnectionManager((SSLContext)null, (hostName, sslSession) -> {
                        return true;
                    }));
                }

                closeableHttpClient = builder.build();
                result = closeableHttpClient.execute(httpRequestBase);
                var9 = result.getCode();
            } finally {
                if (null != result) {
                    try {
                        result.close();
                    } catch (IOException var19) {
                    }
                }

                if (null != closeableHttpClient) {
                    try {
                        closeableHttpClient.close();
                    } catch (IOException var18) {
                    }
                }

            }

            return var9;
        }
    }

    private HttpUriRequestBase getHttpRequestBase(ServerInfoVO server, Map<String, Object> serverInfoMap) throws IOException {
        StringBuffer urlBuf = new StringBuffer();
        if (server.getSecurePortEnabled()) {
            urlBuf.append("https://");
        } else {
            urlBuf.append("http://");
        }

        urlBuf.append(server.getServerUrl().endsWith("/") ? server.getServerUrl() : server.getServerUrl() + "/");
        urlBuf.append(serverInfoMap.get("SERVICE_URI").toString());
        String url = urlBuf.toString();
        LOGGER.debug("Invoke server url : {0}", new Object[]{url});
        if (serverInfoMap.get("SERVICE_QUERYPARAMETERS") != null) {
            if (url.indexOf("?") != -1) {
                url = url + "&" + serverInfoMap.get("SERVICE_QUERYPARAMETERS").toString();
            } else {
                url = url + "?" + serverInfoMap.get("SERVICE_QUERYPARAMETERS").toString();
            }
        }

        String method = serverInfoMap.get("SERVICE_METHOD").toString();
        HttpUriRequestBase httpRequestBase = null;
        if ("GET".equalsIgnoreCase(method)) {
            HttpGet get = new HttpGet(url);
            httpRequestBase = get;
        } else if ("PUT".equalsIgnoreCase(method)) {
            HttpPut put = new HttpPut(url);
            put.setEntity(this.getRequestEntity(serverInfoMap.get("SERVICE_OTHERPARAMETERS")));
            httpRequestBase = put;
        } else if ("POST".equalsIgnoreCase(method)) {
            HttpPost post = new HttpPost(url);
            post.setEntity(this.getRequestEntity(serverInfoMap.get("SERVICE_OTHERPARAMETERS")));
            httpRequestBase = post;
        } else if ("DELETE".equalsIgnoreCase(method)) {
            HttpDelete delete = new HttpDelete(url);
            httpRequestBase = delete;
        }

        return (HttpUriRequestBase)httpRequestBase;
    }

    private HttpEntity getRequestEntity(Object otherParameters) throws IOException {
        if (null == otherParameters) {
            return null;
        } else {
            String jsonData = JsonUtil.getJsonString(otherParameters);
            return new StringEntity(jsonData);
        }
    }
}
