/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 */

package com.huawei.it.jalor5.security.service.impl.internal;

import java.lang.reflect.Method;
import java.util.Stack;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;
import org.springframework.util.ClassUtils;

import com.huawei.his.jalor.security.PermissionChecker;
import com.huawei.it.jalor5.core.annotation.JalorOperation;
import com.huawei.it.jalor5.core.annotation.JalorResource;
import com.huawei.it.jalor5.core.annotation.SecurityPolicy;
import com.huawei.it.jalor5.core.cache.GlobalParameters;
import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;
import com.huawei.it.jalor5.core.request.IRequestContext;
import com.huawei.it.jalor5.core.request.impl.RequestContext;
import com.huawei.it.jalor5.core.request.impl.RequestContextConstants;
import com.huawei.it.jalor5.core.util.StringUtil;
import com.huawei.it.jalor5.security.AuthenticationException;
import com.huawei.it.jalor5.security.AuthorizationException;
import com.huawei.it.jalor5.security.OperationDefinitionVO;
import com.huawei.it.jalor5.security.SecurityConstants;
import com.huawei.it.jalor5.security.SecuritySystemException;
import com.huawei.it.jalor5.security.util.SecurityUtil;

/**
 * The type Security interceptor.
 *
 * @author:cKF49709
 * @version:
 * @since 2012 -12-22 Jalor安全AOP拦截器 <p> Created：2011-9-20
 */
public class SecurityInterceptor implements MethodInterceptor {
    private static final String UNKNOWN_URI = "Unknown";

    private static final ILogger LOGGER = JalorLoggerFactory.getLogger(SecurityInterceptor.class);

    private static final String SECURITY_STACK = "Security.Stack";

    private PermissionChecker permissionService = PermissionChecker.getInstance();

    /*
     * （非 Javadoc）
     *
     * @see org.aopalliance.intercept.MethodInterceptor#invoke(org.aopalliance.intercept.MethodInvocation)
     */
    public Object invoke(final MethodInvocation invocation) throws Throwable {
        IRequestContext requestContext = RequestContext.getCurrent();
        boolean skipSecurityCheck = requestContext.isSkipSecurityCheck();
        // 不合并角色 + skipSecurityCheck ==> 直接绕过权限拦截
        if (skipSecurityCheck && !GlobalParameters.isValueTrue("MergePermission2CurrentRole")) {
            return invocation.proceed();
        }

        // 获取方法上的JalorOperation注解
        JalorOperation jalorOperation = getJalorOperation(invocation);
        if (jalorOperation == null) {
            return invocation.proceed();
        }

        // 创建安全上下文
        SecurityContext securityContext = buildSecurityContext(invocation, jalorOperation);

        // 记录下校验的权限点
        // 移到最前面，后者jwt skip security 的场景， 合并角色时，拿不到当前权限点
        if (securityContext != null && !StringUtil.isNullOrEmpty(securityContext.getResourceCode())
            && !StringUtil.isNullOrEmpty(securityContext.getOperationCode())
            && GlobalParameters.isValueTrue("MergePermission2CurrentRole")) {
            requestContext.setItem(SecurityConstants.SECURITY_PERMISSION_KEY,
                OperationDefinitionVO.getKeyString(SecurityConstants.SECURITY_RESOURCE_TYPE_SERVICE,
                    securityContext.getResourceCode(),
                    securityContext.getOperationCode()));
            // 合并角色 + skipSecurityCheck ==> 设置权限点到上下文后才绕过权限拦截
        }

        // 修复servlet无权限码注解场景报401的问题
        if (skipSecurityCheck) {
            return invocation.proceed();
        }

        // 从请求上下文中获取安全控制栈
        SecurityStack securityStack = getOrCreateSecurityStack(requestContext);

        // 执行授权检查
        SecurityFrame frame = doAuthorization(securityStack, securityContext, requestContext);

        // 入栈
        securityStack.push(frame);
        try {
            // 执行业务方法
            return invocation.proceed();
        } finally {
            // 业务方法执行完毕，执行出栈操作
            if (!securityStack.isEmpty()) {
                securityStack.pop();
            }
        }
    }

    /**
     * 根据请求上下文信息获取或新建安全控制栈
     *
     * @author cKF49709
     * @since Dec 27, 2011
     * @return result
     */
    private SecurityStack getOrCreateSecurityStack(IRequestContext requestContext) {
        SecurityStack securityStack = (SecurityStack) requestContext.getItem(SECURITY_STACK);
        if (securityStack == null) {
            securityStack = new SecurityStack();
            requestContext.setItem(SECURITY_STACK, securityStack);
        }

        return securityStack;
    }

    /**
     * 执行授权检查
     *
     * @param securityStack   the security stack
     * @param securityContext securityContext
     * @param requestContext  the request context
     * @return the security frame
     * @throws SecuritySystemException the security system exception
     * @author cKF49709
     * @since Dec 27, 2011
     */
    protected SecurityFrame doAuthorization(SecurityStack securityStack, SecurityContext securityContext,
        IRequestContext requestContext) throws SecuritySystemException {
        SecurityFrame frame = new SecurityFrame(securityContext);

        /* * 当前安全栈的ignoreAll属性为true，则忽略权限检查 * */
        if (securityStack.isIgnoreAll()) {
            return frame;
        }

        SecurityPolicy policy = securityContext.getRawSecurityPolicy();
        if (SecurityPolicy.Required == policy) {
            doRequiredAuthorization(securityContext, securityStack, frame, requestContext);
        } else if (SecurityPolicy.Mandatory == policy) {
            /**
             * 强制执行安全检查，并设置该方法的安全帧为已经进行过安全检查。
             */
            checkMandatoryPermission(securityContext, securityStack, requestContext);
        } else if (SecurityPolicy.AllSystemUser == policy) {
            doSystemAuthorization(securityStack, requestContext);
        } else if (SecurityPolicy.AllLogonUser == policy) {
            doLogonAuthorization(securityStack, requestContext);
        } else if (SecurityPolicy.JalorInternal == policy) {
            doInternalAuthorization(requestContext);
        }
        frame.setChecked(true);
        return frame;
    }

    /**
     * 检查内部Token
     *
     * @param requestContext requestContext
     * @param requestContext requestContext
     */
    private void doInternalAuthorization(IRequestContext requestContext) {
        Object item = requestContext.getItem(SecurityConstants.INTERNAL_TOKEN);
        if (null == item) {
            throw new AuthorizationException();
        }

        if (!SecurityUtil.genInternalToken().equals(item)) {
            if (!SecurityUtil.genInternalTokenForAdaptation(item.toString())) {
                if (null != requestContext.getApplication()) {
                    LOGGER.error("Internal token invalid." + item.toString().length() + "."
                            + requestContext.getApplication().getAppName() + ":"
                            + requestContext.getApplication().getEnviorment());
                } else {
                    LOGGER.error("Internal token invalid." + item.toString().length());
                }
                
                LOGGER.error("check Internal token invalid,Please Read it:" + "http://3ms.huawei.com/hi/group/2692001/wiki_6017670.html");
                throw new AuthorizationException();
            }
        }
    }

    /**
     * @param securityStack securityStack
     * @param requestContext requestContext
     */
    private void doSystemAuthorization(SecurityStack securityStack, IRequestContext requestContext) {
        if (securityStack.isEmpty()) {
            LOGGER.debug("Before checkIsSystemUser: {0}", getUri(requestContext));
            permissionService.checkIsSystemUser();
        } else {
            SecurityFrame top = securityStack.peek();
            if (!top.isChecked()) {
                LOGGER.debug("Before checkIsSystemUser: {0}", getUri(requestContext));
                permissionService.checkIsSystemUser();
            }
        }
    }

    /**
     * @param securityStack securityStack
     * @param requestContext requestContext
     */
    private void doLogonAuthorization(SecurityStack securityStack, IRequestContext requestContext) {
        if (securityStack.isEmpty()) {
            LOGGER.debug("Before checkIsUserLogon: {0}", getUri(requestContext));
            permissionService.checkIsUserLogon();
        } else {
            SecurityFrame top = securityStack.peek();
            if (!top.isChecked()) {
                LOGGER.debug("Before checkIsUserLogon:{0}", getUri(requestContext));
                permissionService.checkIsUserLogon();
            }
        }
    }

    /**
     * 处理SecurityPolicy为Required的情况。
     *
     * @param securityContext securityContext
     * @param securityStack   securityStack
     * @param frame           frame
     * @param requestContext  the request context
     * @author cKF49709
     * @since Mar 9, 2012
     */
    protected void doRequiredAuthorization(SecurityContext securityContext, SecurityStack securityStack,
        SecurityFrame frame, IRequestContext requestContext) {
        checkResource(securityContext);
        /**
         * 检查栈顶元素是否执行过安全检查，
         * (1). 执行过安全检查：则本方法不进行安全检查，同时设置该方法的安全帧为已经检查过；
         * (2). 未执行过安全检查：则执行本方法的安全检查，同时设置该方法的安全帧为已经检查过；
         *
         * 如果当前方法为入口方法（栈为空），则执行当前方法的安全检查。
         */
        if (securityStack.isEmpty()) {
            checkMandatoryPermission(securityContext, securityStack, requestContext);
        } else {
            SecurityFrame top = securityStack.peek();
            if (!top.isChecked()) {
                checkMandatoryPermission(securityContext, securityStack, requestContext);
            }
        }
    }

    /**
     * 检查资源是否存在
     *
     * @author l54883
     * @since 2013-4-9
     * @param securityContext securityContext
     */
    private void checkResource(SecurityContext securityContext) {
        if (StringUtil.isNullOrEmpty(securityContext.getResourceCode())) {
            throw new AuthorizationException("huawei.jalor5.security.00010008", securityContext.getMethod().getClass());
        }
    }

    /**
     * 执行权限检查
     *
     * @author cKF49709
     * @since Mar 9, 2012
     * @param securityContext securityContext
     * @param securityStack securityStack
     */
    private void checkMandatoryPermission(SecurityContext securityContext, SecurityStack securityStack,
        IRequestContext requestContext) {
        checkResource(securityContext);
        // 执行权限检查
        try {
            LOGGER.debug("Before Permission Check: Resource Code={0}, Operation Code={1} ,URI={2}",
                securityContext.getResourceCode(),
                securityContext.getOperationCode(),
                getUri(requestContext));
            permissionService.checkPermission(SecurityConstants.SECURITY_RESOURCE_TYPE_SERVICE,
                securityContext.getResourceCode(),
                securityContext.getOperationCode());

        } catch (AuthenticationException ex) {
            if (LOGGER.isDebugEnabled() && RequestContext.getCurrent().getUser() != null) {
                long userId = RequestContext.getCurrent().getUser().getUserId();
                LOGGER.debug("The user " + userId + " have no '" + securityContext.getOperationCode()
                    + "' permission on '" + securityContext.getResourceCode() + "' resource.");
            }
            throw ex;
        }
    }

    /**
     * 构造安全上下文
     *
     * @param invocation    AOP的方法调用信息
     * @return  安全上下文
     */
    private SecurityContext buildSecurityContext(MethodInvocation invocation, JalorOperation jalorOperation) {
        // 获取资源识别码
        Object target = invocation.getThis();
        JalorResource jalorResource = target.getClass().getAnnotation(JalorResource.class);

        Method method = ClassUtils.getMostSpecificMethod(invocation.getMethod(), invocation.getThis().getClass());
        return new SecurityContext(method, jalorOperation, jalorResource);
    }

    /**
     * 获取方法上JalorOperation注解
     *
     * @author cKF49709
     * @since Dec 20, 2011
     * @param invocation invocation
     * @return result
     */
    private JalorOperation getJalorOperation(MethodInvocation invocation) {
        Method method = invocation.getMethod();
        method = ClassUtils.getMostSpecificMethod(method, invocation.getThis().getClass());
        // Note: annotation可能为null，因为接口的方法调用也会被拦截到，如：IGroupService#createGroup
        return method.getAnnotation(JalorOperation.class);
    }

    private static String getUri(IRequestContext requestContext) {
        String uri = (String) requestContext.getItem(RequestContextConstants.KEY_URI);
        if (uri == null) {
            return UNKNOWN_URI;
        }

        return uri;
    }

    /**
     * The type Security stack.
     */
    private static class SecurityStack extends Stack<SecurityFrame> {
        private static final long serialVersionUID = 8107990125407702524L;

        /**
         * Is ignore all boolean.
         *
         * @return the boolean
         */
        public boolean isIgnoreAll() {
            if (!isEmpty()) {
                SecurityFrame item = this.get(0);
                if (item.securityContext.getRawSecurityPolicy() == SecurityPolicy.IgnoreAll) {
                    return true;
                }
            }

            return false;
        }

        @Override
        public synchronized SecurityFrame pop() {
            return super.pop();
        }

        @Override
        public SecurityFrame push(SecurityFrame item) {
            return super.push(item);
        }
    }

    /**
     * 安全栈中的一个帧
     *
     * @author cKF49709
     * @since Dec 22, 2011
     */
    class SecurityFrame {
        /**
         * 安全上下文
         */
        SecurityContext securityContext;

        /**
         * 本帧是否执行过安全检查
         */
        boolean checked = false;

        /**
         * 构造一个SecurityFrame
         *
         * @param securityContext securityContext
         */
        SecurityFrame(SecurityContext securityContext) {
            this.securityContext = securityContext;
        }

        /**
         * Is checked boolean.
         *
         * @return the boolean
         */
        boolean isChecked() {
            return checked;
        }

        /**
         * Sets checked.
         *
         * @param flag the flag
         */
        void setChecked(boolean flag) {
            checked = flag;
        }

        @Override
        public String toString() {
            return securityContext.toString();
        }
    }
}
