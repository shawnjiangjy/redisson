//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package com.huawei.it.jalor5.web.support.filter;

import com.huawei.it.jalor5.core.dispatcher.impl.EventUtil;
import com.huawei.it.jalor5.core.exception.ExceptionHandler;
import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;
import com.huawei.it.jalor5.core.request.IApplicationPrincipal;
import com.huawei.it.jalor5.core.request.impl.Application;
import com.huawei.it.jalor5.core.request.impl.RequestContextManager;
import com.huawei.it.jalor5.core.support.session.IAfterRequestHandler;
import com.huawei.it.jalor5.core.support.session.IBeforeRequestHandler;
import com.huawei.it.jalor5.core.support.session.IRequestExceptionHandler;
import com.huawei.it.jalor5.core.util.PathUtil;
import com.huawei.it.jalor5.web.support.internal.impl.RequestContextInitUtil;
import com.huawei.it.jalor5.web.support.internal.impl.RequestLangUtil;
import com.huawei.it.jalor5.web.support.internal.impl.RequestUtil;
import com.huawei.it.jalor5.web.support.internal.impl.ResponseUtil;
import com.huawei.it.jalor5.web.support.servlet.util.ServletExceptionHandler;
import java.io.IOException;
import java.net.InetAddress;
import java.net.URLDecoder;
import java.net.UnknownHostException;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.util.StringUtils;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

public final class RequestContextFilter implements Filter {
    private static final ILogger LOGGER = JalorLoggerFactory.getLogger(RequestContextFilter.class);

    public RequestContextFilter() {
    }

    public void destroy() {
    }

    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException {
        long time = System.currentTimeMillis();
        HttpServletRequest httpReq = RequestUtil.getHttpServletRequest(req);
        HttpServletResponse httpRes = RequestUtil.getHttpServletResponse(resp);
        ServletRequestAttributes attributes = new ServletRequestAttributes(httpReq);
        RequestContextHolder.setRequestAttributes(attributes);
        if (!RequestUtil.isContextPathInitialized()) {
            this.initContext(httpReq);
        }

        RequestUtil.initRequestAttributes(httpReq);
        String shortUri = RequestUtil.getShortUri(httpReq);
        String reqUri = URLDecoder.decode(shortUri, "UTF-8");
        if (PathUtil.isInvalidPath(reqUri)) {
            LOGGER.error("Invalid resource request path [" + reqUri + "]");
            httpRes.sendError(404, "Invalid resource request.");
        } else {
            try {
                RequestContextManager.setCurrent(RequestContextInitUtil.buildBasicContext(httpReq));
                if (!RequestUtil.isResource(httpReq)) {
                    EventUtil.dispatch(IBeforeRequestHandler.class);
                }

                chain.doFilter(req, resp);
                if (null != RequestContextManager.getCurrent(true) && !resp.isCommitted()) {
                    RequestLangUtil.getUserLang(httpReq);
                }
            } catch (Exception var16) {
                ServletExceptionHandler.handle(var16, httpReq, ResponseUtil.getHttpServletResponse(resp));
                EventUtil.dispatch(IRequestExceptionHandler.class);
            } catch (Error var17) {
                LOGGER.fatal(var17);
                throw var17;
            } finally {
                EventUtil.dispatch(IAfterRequestHandler.class);
                this.clearSession(httpReq);
                RequestContextManager.removeCurrent();
                time = System.currentTimeMillis() - time;
                LOGGER.debug2("----[{}] ms used for:[{}]", new Object[]{time, shortUri});
                this.setThreadName(httpReq);
            }

        }
    }

    private void clearSession(HttpServletRequest httpReq) {
        if (httpReq.getHeader("JalorInternalToken") != null && null != RequestContextManager.getCurrent(true) && null == RequestContextManager.getCurrent().getItem("JalorCookiesType")) {
            LOGGER.debug("Internal invoke.Session will be cleared");
            RequestUtil.clearSession(httpReq);
        }

    }

    private void setThreadName(HttpServletRequest httpReq) {
        Thread currentThread = Thread.currentThread();
        StringBuilder name = new StringBuilder(150);
        name.append("WebContainer : ").append(currentThread.getId());
        String tracerid = httpReq.getHeader("x-tracerid");
        if (!StringUtils.isEmpty(tracerid)) {
            name.append("-T:").append(tracerid);
        }

        currentThread.setName(name.toString());
    }

    private void initContext(HttpServletRequest httpReq) {
        String contextPath = RequestUtil.getContextPath(httpReq);
        IApplicationPrincipal app = Application.getCurrent();
        ((Application)app).setContextPath(contextPath);
        LOGGER.info2("After context path set to: {}", new Object[]{contextPath});

        try {
            RequestUtil.setHostName(InetAddress.getLocalHost().getHostName());
        } catch (UnknownHostException var5) {
            ExceptionHandler.logException(var5);
            RequestUtil.setHostName(httpReq.getLocalName());
        }

        RequestUtil.setContextPathInitialized(true);
    }

    public void init(FilterConfig arg0) throws ServletException {
    }
}

