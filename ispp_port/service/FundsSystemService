/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.monitor;

import com.huawei.it.jalor5.core.annotation.JalorOperation;
import com.huawei.it.jalor5.core.annotation.JalorResource;
import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;
import com.huawei.it.jalor5.core.request.impl.RequestContext;
import com.huawei.it.jalor5.security.UserVO;
import com.huawei.it.occsafe.dao.monitor.FundsSystemConfigDao;
import com.huawei.it.occsafe.service.monitor.IFundsSystemConfigService;
import com.huawei.it.occsafe.util.UserUtil;
import com.huawei.it.occsafe.vo.ResultVo;
import com.huawei.it.occsafe.vo.monitor.FundsSystemVO;

import io.netty.util.internal.StringUtil;

import org.apache.commons.collections.CollectionUtils;

import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

import javax.inject.Inject;
import javax.inject.Named;

/**
 * 资金应用对象配置
 *
 * @author jwx1199302
 * @since 2023/06/15
 */
@Named
@JalorResource(code = "Occ.FundsSystemList", desc = "资金应用对象配置")
public class FundsSystemService implements IFundsSystemConfigService {

    private final ILogger logger = JalorLoggerFactory.getLogger(FundsSystemService.class);

    @Inject
    private FundsSystemConfigDao fundsSystemConfigDao;

    @Override
    @JalorOperation(code = "findFundsConfPageList", desc = "查询资金应用对象配置")
    public List<FundsSystemVO> findFundsConfPageList(FundsSystemVO fundsSystemVO) {
        if(StringUtil.isNullOrEmpty(fundsSystemVO.getBusinessObject())) {
            return fundsSystemConfigDao.findFundsConfPageList(fundsSystemVO);
        } else {
            List<FundsSystemVO> fundsConfPageList = fundsSystemConfigDao.findFundsConfPageList(fundsSystemVO);
            return queryByBusinessObject(fundsConfPageList,fundsSystemVO);
        }
    }

    @Override
    public ResultVo<Object> deleteItem(FundsSystemVO fundsSystemVO) {
        try {
            if (fundsSystemVO!=null) {
                fundsSystemConfigDao.deleteItem(fundsSystemVO);
                return new ResultVo<>(true, "success", "删除成功。");
            } else {
                return new ResultVo<>(false, "delete failed", "传入参数有误，删除金应用对象配置失败！");
            }

        } catch (Exception exception) {
            logger.info("------deleteItem fundsSystemConfig erroe:", exception);
            return new ResultVo<>(false, "delete failed", "删除资金应用对象数据失败！");
        }
    }

    @Override
    @JalorOperation(code = "editItem", desc = "编辑资金应用对象配置")
    public ResultVo<Object> editItem(List<FundsSystemVO> fundsSystemVOs) {
        try {
            if (CollectionUtils.isNotEmpty(fundsSystemVOs)) {
                UserVO user = (UserVO) RequestContext.getCurrent().getUser();
                for (FundsSystemVO vo : fundsSystemVOs) {
                    vo.setUpdatePerson(user.getEmployeeNumber().toUpperCase(Locale.ROOT));
                }
                fundsSystemConfigDao.editItem(fundsSystemVOs);
                return new ResultVo<>(true, "update success", "更新资金应用对象配置成功。");
            } else {
                return new ResultVo<>(false, "update failed", "更新资金应用对象配置失败！");
            }

        } catch (Exception exception) {
            logger.info("------updateFundsSystemConfig:", exception);
            return new ResultVo<>(false, "update failed", "更新资金应用对象配置失败！");
        }
    }

    @Override
    public ResultVo<Object> addItem(List<FundsSystemVO> fundsSystemVOs) {
        try {
            if (CollectionUtils.isNotEmpty(fundsSystemVOs)) {
                fundsSystemConfigDao.addItem(fundsSystemVOs);
                return new ResultVo<>(true, "add success", "添加资金应用对象配置成功。");
            } else {
                return new ResultVo<>(false, "add failed", "添加资金应用对象配置失败！");
            }

        } catch (Exception exception) {
            logger.info("------addFundsSystemConfig:", exception);
            return new ResultVo<>(false, "add failed", "添加金应用对象配置失败！");
        }
    }

    /*
    * 根据businessObject过滤符合条件的数据
    * */
    private List<FundsSystemVO> queryByBusinessObject(List<FundsSystemVO> list, FundsSystemVO fundsSystemVO) {
        String[] bo = fundsSystemVO.getBusinessObject().split("、");
        return list.stream().filter(item->{
            for (String businessObject:bo) {
                if(!com.huawei.it.jalor5.core.util.StringUtil.isNullOrEmpty(item.getBusinessObject()) &&
                    item.getBusinessObject().toUpperCase(Locale.ROOT).contains(businessObject.toUpperCase(Locale.ROOT))){
                    return true;
                }
            }
            return false;
        }).collect(Collectors.toList());
    }
}

