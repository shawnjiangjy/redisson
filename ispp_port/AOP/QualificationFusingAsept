/*
 *  Copyright (c) Huawei Technologies Co., Ltd. 2023-2023. All rights reserved.
 */

package com.huawei.it.occsafe.aspect;

import com.huawei.it.occsafe.service.impl.qualifications.bean.Account;
import com.huawei.it.occsafe.service.impl.qualifications.bean.ComplexFormatterQualificationResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.FormatterQualificationsResponse;
import com.huawei.it.occsafe.service.impl.qualifications.monitor.CacheManager;
import com.huawei.it.occsafe.util.LogUtil;
import com.huawei.it.occsafe.util.ThreadUtil;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import java.util.List;
import java.util.concurrent.ExecutorService;

/**
 * @author jWX1199302
 * @description 人员资质服务熔断切面类
 * @since 2023/03/3 09:49
 */
@Aspect
@Component
public class QualificationFusingAsept implements IAspect {

    private static ExecutorService executorService = ThreadUtil.getExecutors(1);

    @Autowired
    private CacheManager expiredCache;

    @Pointcut("@annotation(com.huawei.it.occsafe.annotation.QualificationFusing)")
    public void qualificationFusing() {
    }

    /**
     * @author jWX1199302
     * @description 人员资质服务熔断切面类环绕通知
     */
    @Override
    @Around("qualificationFusing()")
    public Object doAround(ProceedingJoinPoint joinPoint) {
        if (!expiredCache.getAllowQuery()) {
            // 未启用资质查询，不开启服务熔断功能
            try {
                return joinPoint.proceed();
            } catch (Throwable exception) {
                LogUtil.error("qualification-doAround error" + exception.getMessage());
            }
        }
        Object[] args = null;
        // 设置过期时间为1秒
        Object result = null;
        try {
            args = joinPoint.getArgs();
            result = joinPoint.proceed();
            Object finalResult = result;
            executorService.execute(() -> qualificationHandler(finalResult));
            // 解析result ,如果code=0 人员资质校验不通过，加入缓存。
        } catch (Throwable exception) {
            // 如果服务熔断出现异常，打印调用的参数信息
            LogUtil.error("qualificationFusing-doAround error" + exception.getMessage());
            LogUtil.error("params is "+(String)args[0]);
        }
        return result;

    }

    /**
     * @author jWX1199302
     * @description 后置通知
     */
    @Override
    public Object doAfter(JoinPoint joinPoint) {
        return new Object();
    }

    /**
     * @author jWX1199302
     * @description 处理人员资质返回结果，将不通过的工号存入缓存
     */
    private void qualificationHandler (Object result) {
        ResponseEntity res = (ResponseEntity)result;
        if (res.getBody() instanceof FormatterQualificationsResponse) {
            FormatterQualificationsResponse simpleResponse = (FormatterQualificationsResponse)res.getBody();
                String des = simpleResponse.getDes();
                if (!("".equals(des))) {
                    String[] dess = des.split(";");
                    for (int i = 0; i <dess.length ; i++) {
                        // 缓存的key是工号，过期时间为10分钟
                        if(dess[i].contains(":")){
                            expiredCache.set(dess[i].split(":")[0], dess[i].split(":")[1]);
                        }
                    }
                }
        } else {
            ComplexFormatterQualificationResponse complexResponse = (ComplexFormatterQualificationResponse)res.getBody();
            if ("0".equals(complexResponse.getCode())) {
                List<Account> complexResut = complexResponse.getResult();
                if (complexResut!=null && complexResut.size()>0) {
                    complexResut.stream().forEach(account -> {
                        // 缓存的key是工号，过期时间为10分钟
                        expiredCache.set(account.getW3account(),account.getDes());
                    });
                }
            }
        }
    }
}

