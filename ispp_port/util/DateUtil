/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2019-2019. All rights reserved.
 */

package com.huawei.it.occsafe.common;

import com.huawei.it.occsafe.util.LogUtil;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Calendar;
import java.util.ArrayList;

/**
 * 日期处理
 *
 * @author hwx593651
 * @since 2020/1/16
 */
public class DateUtil {

    /**
     * 日期格式化
     *
     * @param date date
     * @return formatted data
     */
    public static String dateFormat(Date date) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return sdf.format(date);
    }

    /**
     * 获取当前时间前6月的时间
     *
     * @return 获取当前时间前6月的时间
     */
    public static Map<Integer, List<String>> getMonthNode() {
        Map<Integer, List<String>> resultMap = new HashMap<>();
        for (int i = 5; i >= 0; i--) {
            List<String> dateList = new ArrayList<>();
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            Calendar instance = Calendar.getInstance();
            Calendar instance1 = Calendar.getInstance();
            int dayOfWeek = instance.get(Calendar.DAY_OF_WEEK) - 1;
            int offset1 = 1 - dayOfWeek;
            int offset2 = 7 - dayOfWeek;
            instance.add(Calendar.DATE, offset1 - 7 * i);
            instance1.add(Calendar.DATE, offset2 - 7 * i);
            String startDate = format.format(instance.getTime());
            String endDate = format.format(instance1.getTime());
            dateList.add(startDate + " 00:00:00");
            dateList.add(endDate + " 23:59:59");
            resultMap.put(i, dateList);
        }
        return resultMap;
    }

    /**
     * 获取当前时间前6月份的日期
     *
     * @return 结果
     *{1=[2023-01-01 00:00:00, 2023-01-31 23:59:59], 2=[2023-01-01 00:00:00, 2023-02-28 23:59:59], 3=[2023-01-01 00:00:00, 2023-03-31 23:59:59], 4=[2023-01-01 00:00:00, 2023-04-30 23:59:59], 5=[2023-01-01 00:00:00, 2023-05-31 23:59:59], 6=[2023-01-01 00:00:00, 2023-06-30 23:59:59]}
     */
    public static Map<Integer, List<String>> getDateNode() {
        Map<Integer, List<String>> resultMap = new HashMap<>();
        Calendar instance = Calendar.getInstance();
        instance.set(Calendar.DAY_OF_MONTH, instance.getActualMaximum(Calendar.DAY_OF_MONTH));
        String[] last12Months = getLast6Months(new Date());
        return getResult(resultMap, instance, last12Months);
    }

    /**
     * 获取当前时间前12月份的日期1 2 3 4 5 6 7 8 9 10 11 12
     *
     * @return 结果
     */
    public static Map<Integer, List<String>> getDateNode2() {
        Map<Integer, List<String>> resultMap = new HashMap<>();
        Calendar instance = Calendar.getInstance();
        instance.set(Calendar.DAY_OF_MONTH, instance.getActualMaximum(Calendar.DAY_OF_MONTH));
        String[] last12Months = getLast12Months(new Date());
        return getResult(resultMap, instance, last12Months);
    }

    private static Map<Integer, List<String>> getResult(Map<Integer, List<String>> resultMap, Calendar instance,
        String[] last12Months) {
        String node1 = last12Months[0] + "-01 00:00:00";
        for (int i = 0; i < last12Months.length; i++) {
            List<String> dateList = new ArrayList<>();
            String startDate = last12Months[i] + "-01 00:00:00";
            SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("yyyy-MM-dd");
            Date parse = null;
            try {
                parse = simpleDateFormat1.parse(startDate);
            } catch (ParseException exeption) {
                LogUtil.error(exeption);
            }
            instance.setTime(parse);
            instance.set(Calendar.DAY_OF_MONTH, instance.getActualMaximum(Calendar.DAY_OF_MONTH));
            Date time = instance.getTime();
            String format = simpleDateFormat1.format(time);
            String endDate = format + " 23:59:59";
            dateList.add(node1);
            dateList.add(endDate);
            resultMap.put(i + 1, dateList);
        }
        return resultMap;
    }

    public static String[] getLast6Months(Date timeDay) {
        Date date = getParseDate(timeDay);
        String[] last12Months = new String[6];
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.set(Calendar.MONTH, cal.get(Calendar.MONTH) + 1);
        for (int i = 0; i < 6; i++) {
            cal.set(Calendar.MONTH, cal.get(Calendar.MONTH) - 1);
            last12Months[5 - i] = cal.get(Calendar.YEAR) + "-" + addZeroForNum(
                String.valueOf(cal.get(Calendar.MONTH) + 1), 2);
        }
        return last12Months;
    }

    public static String[] getLast12Months(Date timeDay) {
        Date date = getParseDate(timeDay);
        String[] last12Months = new String[12];
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.set(Calendar.MONTH, cal.get(Calendar.MONTH) + 1);
        for (int i = 0; i < 12; i++) {
            cal.set(Calendar.MONTH, cal.get(Calendar.MONTH) - 1);
            last12Months[11 - i] = cal.get(Calendar.YEAR) + "-" + addZeroForNum(
                String.valueOf(cal.get(Calendar.MONTH) + 1), 2);
        }
        return last12Months;
    }

    private static Date getParseDate(Date timeDay) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
        String time = sdf.format(timeDay);
        if (time.length() == 7) {
            time = time + "-01 00:00:00";
        } else if (time.length() == 110) {
            time = time.substring(0, 7) + "-01 00:00:00";
        }
        Date date = new Date();
        SimpleDateFormat sdp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        try {
            date = sdp.parse(time);
        } catch (ParseException exeption) {
            LogUtil.error(exeption);
        }
        return date;
    }

    public static String addZeroForNum(String str, int strLength) {
        int strLen = str.length();
        while (strLen < strLength) {
            StringBuffer sbs = new StringBuffer();
            sbs.append("0").append(str);
            str = sbs.toString();
            strLen = str.length();
        }
        return str;
    }

}

