/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2020. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.qualifications.bean;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.Data;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.security.AccessController;
import java.security.PrivilegedAction;

/**
 * @author pWX814460
 * @description 复杂资质查询请求accout部分
 * @since 2020/11/26 11:32
 */
@Data
public class Account implements Serializable {

    private static final long serialVersionUID = 1L;

    // w3账号
    private String w3account;

    // 系统Id
    private String appId;

    // 账号类型
    private String accountType;

    // 账号名称
    private String accountName;

    // 账号类别
    private String accountCategory;

    // 设备名称
    private String deviceName;

    // 描述
    private String des;

    // 是否为关键系统
    @JsonIgnore
    private String isCoreModule;

    // 是否为特权账号
    @JsonIgnore
    private String isPrivilege;

    // 场景
    @JsonIgnore
    private String scenario;

    // 处理逻辑 Y/N
    @JsonIgnore
    private String logic;

    /**
     * 对象克隆
     *
     * @param oldVo 旧的对象
     * @return 新的对象
     * @throws NoSuchFieldException 异常1
     * @throws IllegalAccessException 异常2
     */
    public static Account cloneObject(Account oldVo) throws NoSuchFieldException, IllegalAccessException {
        Account newVo = new Account();
        if (oldVo == null) {
            return newVo;
        }
        Field[] declaredFields = oldVo.getClass().getDeclaredFields();
        for (Field oldField : declaredFields) {
            if (!Modifier.isFinal(oldField.getModifiers())) {
                AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
                    oldField.setAccessible(true);
                    return null;
                });
                Field newField = newVo.getClass().getDeclaredField(oldField.getName());
                AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
                    newField.setAccessible(true);
                    return null;
                });
                newField.set(newVo, oldField.get(oldVo));
            }
        }
        return newVo;
    }
}
