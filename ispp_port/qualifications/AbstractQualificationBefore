/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2022. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.qualifications;

import com.huawei.it.jalor5.core.log.ILogger;
import com.huawei.it.jalor5.core.log.JalorLoggerFactory;
import com.huawei.it.jalor5.core.util.StringUtil;
import com.huawei.it.occsafe.dao.IEmployeeRecordDao;
import com.huawei.it.occsafe.dao.ISelectOptionConfigDao;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationContext;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationsRequest;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QueryRuleContext;
import com.huawei.it.occsafe.service.impl.qualifications.config.QualificationConfig;
import com.huawei.it.occsafe.service.impl.qualifications.config.QualificationExecutorRuleConfig;
import com.huawei.it.occsafe.service.impl.qualifications.factory.QuerySenerioFactory;
import com.huawei.it.occsafe.service.qualifications.IQualificationBefore;
import com.huawei.it.occsafe.util.LogUtil;
import com.huawei.it.occsafe.util.UserUtil;
import com.huawei.it.occsafe.vo.SelectOptionConfigVO;

import org.apache.commons.collections.CollectionUtils;

import javax.inject.Inject;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author pWX814460
 * @description AbstractQualificationBefore
 * @since 2020/11/3 14:39
 */
public abstract class AbstractQualificationBefore implements IQualificationBefore {

    // 变更系统调用场景
    private static final String CHANGE_SYSTEM = "11";

    private final ILogger logger = JalorLoggerFactory.getLogger(AbstractQualificationBefore.class);

    @Inject
    private IEmployeeRecordDao employeeRecordDao;

    @Inject
    private ISelectOptionConfigDao selectOptionConfigDao;

    /**
     * 不同的操作部分
     *
     * @param context 执行上下文
     * @param request 请求参数
     * @param notJyMembers 非机要人员
     */
    protected abstract void difPart(QualificationContext context, QualificationsRequest request,
        List<String> notJyMembers);

    /**
     * 根据请求参数获取执行场景
     *
     * @param request 参数
     * @return 结果集
     */
    @Override
    public QualificationContext checkScenario(QualificationsRequest request) {
        // 场景1 只查询it认证考试规则
        // 场景2 2-1 机要人员或红区机要区 2-2 非场景2-1
        String area = request.getArea();
        QualificationContext context = QualificationContext.getDefaultContext();
        List<String> workNoList = request.getWorkNoList();
        // 判断是否为变更系统调用
        if(isChangeSystem()){
            context.register(QuerySenerioFactory.getSenerio(QualificationExecutorRuleConfig.RULE_SEVEN), new QueryRuleContext(request, workNoList, CHANGE_SYSTEM));
        }
        // 查询是否开启只验证it认证考试开关
        LogUtil.info("------is only qualification exam------"+QualificationConfig.DEFAULT.getItExamUnique());
        if (QualificationConfig.DEFAULT.getItExamUnique()) {
            context.register(QuerySenerioFactory.getSenerio("3"), new QueryRuleContext(request, workNoList, "2"));
            return context;
        }
        // 红区机要区
        if ((!StringUtil.isNullOrEmpty(area) && Integer.parseInt(area) == 1)) {
            // 所有账号走红区机要区规则
            context.register(QuerySenerioFactory.getSenerio("1"), new QueryRuleContext(request, workNoList, "3"));
            return context;
        }
        LogUtil.info("------getjyMembers start------");
        // 机要人员
        List<String> jyMembers = isJy(workNoList);
        LogUtil.info("------getjyMembers end------");
        List<String> notJyMembers = workNoList;
        if (!CollectionUtils.isEmpty(jyMembers)) {
            context.register(QuerySenerioFactory.getSenerio("1"), new QueryRuleContext(request, jyMembers, "3"));
            notJyMembers = com.huawei.it.occsafe.util.StringUtil.removeSimilarList(workNoList, jyMembers);
        }
        // 获取非机要人员
        difPart(context, request, notJyMembers);
        return context;
    }

    /**
     * 机要人员判断
     *
     * @param workNoList 账号
     * @return true机要人员 false 非机要人员
     */

    private List<String> isJy(List<String> workNoList) {
        List<String> jyMember = new ArrayList<>();
        if (CollectionUtils.isEmpty(workNoList)) {
            return jyMember;
        }
        jyMember = employeeRecordDao.getJyMember(workNoList);
        if (!CollectionUtils.isEmpty(jyMember)) {
            jyMember.replaceAll(String::toUpperCase);
        }
        return jyMember;
    }

    /*
     * 判断是否为变更系统
     * */
    public boolean isChangeSystem() {
        String appId = UserUtil.getCallSystem();
        if(StringUtil.isNullOrEmpty(appId)){
            return false;
        }
        logger.info(new Date().toString()+"callSystem::"+appId);
         try {
             // 获取变更系统相关拦截配置
             SelectOptionConfigVO vo = new SelectOptionConfigVO();
             vo.setModule("SpecCtrl_Qual");
             List<SelectOptionConfigVO> config = selectOptionConfigDao.findConfig(vo);
             if (CollectionUtils.isEmpty(config)){
                 return false;
             }
             List<String> appIdList = config.stream().map(SelectOptionConfigVO::getValueDes).collect(Collectors.toList());
             logger.info("SpecCtrl_Qual appIdList::"+appIdList);
             // 如果变更系统相关拦截配置的appId包含调用系统的appId则进行外包或新员工校验
             if(appIdList.contains(appId)){
                 return true;
             }
             return false;
         } catch (Exception exception) {
             logger.error("AbstractQualificationBefore::获取appid异常!",exception);
             return false;
         }
    }

}
