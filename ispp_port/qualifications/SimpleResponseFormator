/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.qualifications;

import com.huawei.it.jalor5.core.util.StringUtil;
import com.huawei.it.occsafe.dao.portrait.IPersonInfoDao;
import com.huawei.it.occsafe.dao.qualification.IQualificationsLogDao;
import com.huawei.it.occsafe.service.impl.qualifications.bean.FormatResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.FormatterQualificationsResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationsResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationsResponseWrap;
import com.huawei.it.occsafe.service.qualifications.IResponseFormator;
import com.huawei.it.occsafe.vo.portrait.PersonInfoVO;
import com.huawei.it.occsafe.vo.qualification.QualificationsLogVO;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringJoiner;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;

import javax.inject.Inject;

/**
 * @author pWX814460
 * @description SimpleResponseFormator
 * @since 2020/11/3 15:13
 */
@Service
public class SimpleResponseFormator implements IResponseFormator<FormatterQualificationsResponse> {

    @Inject
    private IQualificationsLogDao qualificationsLogDao;

    @Inject
    private IPersonInfoDao personInfoDao;

    @Override
    public FormatterQualificationsResponse formatResponse(QualificationsResponseWrap qrw, Map<String, Object> map) {
        List<QualificationsResponse> res = qrw.getResponse();
        res = LogHandler.handLog(res);
        qrw.setResponse(res);
        List<PersonInfoVO> personInfos = getPersonInfo(res);
        // 需要格式化返回值
        // 结果的code
        AtomicReference<String> code = new AtomicReference<>("1");
        StringJoiner des = new StringJoiner("");
        // 日志
        List<QualificationsLogVO> logs = new ArrayList<>();
        String scenario = "";

        FormatResponse formatResponse = new FormatResponse(personInfos, qrw, code, des, logs, scenario, map,qrw.getTipQueue()).invoke();
        String fqDes = formatResponse.getFqDes();
        scenario = formatResponse.getScenario();
        // 录入日志
        if (!CollectionUtils.isEmpty(logs) && !"9999".equals(scenario)) {
            String tip = map.get("tip") != null ? (String) map.get("tip") : "";

            logs.stream().forEach(item -> {
                if (!StringUtil.isNullOrEmpty(tip)) {
                    item.setAccountResultMessage(tip);
                }
            });
            qualificationsLogDao.saveQualificationsLog(logs);
        }
        FormatterQualificationsResponse fqr = new FormatterQualificationsResponse(code.get(), fqDes);
        String examTips = formatResponse.getExamTips()!=null? formatResponse.getExamTips():"";
        fqr.setExamTip(examTips);
        return fqr;
    }

    protected List<PersonInfoVO> getPersonInfo(List<QualificationsResponse> res) {
        Map<String, List<QualificationsResponse>> collect = res.stream()
            .collect(Collectors.groupingBy(QualificationsResponse::getAccount));
        Set<String> strings = collect.keySet();
        List list = new ArrayList(strings);
        List<PersonInfoVO> personInfoListDetail = new ArrayList<>();
        if (CollectionUtils.isNotEmpty(list)) {
            personInfoListDetail = personInfoDao.getPersonInfoListDetail(list);
        }
        return personInfoListDetail;
    }
}
