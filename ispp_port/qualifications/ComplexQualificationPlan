/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.qualifications;

import com.huawei.it.occsafe.annotation.QualificationFusing;
import com.huawei.it.occsafe.service.impl.qualifications.bean.ComplexFormatterQualificationResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.PromptResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationsResponseWrap;
import com.huawei.it.occsafe.service.qualifications.IQualificationQuery;
import com.huawei.it.occsafe.service.qualifications.IResponseFormator;
import com.huawei.it.occsafe.util.LogUtil;
import com.huawei.it.occsafe.util.UserUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * @author pWX814460
 * @description qualification计划
 * @since 2020/11/3 10:59
 */
@Component
public class ComplexQualificationPlan extends AbstractQualificationPlan {

    @Autowired
    @Qualifier("complexResponseFormator")
    private IResponseFormator complexResponseFormator;

    @Autowired
    @Qualifier("complexQualificationQuery")
    private IQualificationQuery complexQualificationQuery;

    @Override
    @QualificationFusing
    public ResponseEntity<PromptResponse> qualification(String params) {
        Date invokeTime = new Date();
        Long start = System.currentTimeMillis();
        LogUtil.info("qualification-v2 start params is: "+params);
        QualificationsResponseWrap qrw = readyAndQuery(params, complexQualificationQuery);
        if (reject(qrw)) {
            LogUtil.info("no log record:,不记录校验日志！"+params+"---"+qrw.toString());
            return ResponseEntity.of(Optional.of(new ComplexFormatterQualificationResponse("0", new ArrayList<>())));
        }
        Long end = System.currentTimeMillis();
        Date responseTime = new Date();
        Long costTime = end - start;
        Map<String, Object> map = new HashMap<>();
        map.put("invokeTime", invokeTime);
        map.put("responseTime", responseTime);
        map.put("costTime", costTime);
        map.put("callSystem", UserUtil.getCallSystem());
        Map<String, String> tipMap = qrw.getTipMap();
        map.putAll(tipMap);
        PromptResponse formatterQualificationsResponse = complexResponseFormator.formatResponse(qrw, map);
        formatterQualificationsResponse.setChangeDes(
            tipMap.get("changedPersons") == null ? "" : tipMap.get("changedPersons"));
        return ResponseEntity.ok(formatterQualificationsResponse);
    }
}
