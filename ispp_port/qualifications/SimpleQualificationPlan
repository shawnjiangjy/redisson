/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.qualifications;

import com.huawei.it.occsafe.annotation.QualificationFusing;
import com.huawei.it.occsafe.service.impl.qualifications.bean.FormatterQualificationsResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.PromptResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationsResponseWrap;
import com.huawei.it.occsafe.service.qualifications.IQualificationQuery;
import com.huawei.it.occsafe.service.qualifications.IResponseFormator;
import com.huawei.it.occsafe.util.LogUtil;
import com.huawei.it.occsafe.util.UserUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Component
public class SimpleQualificationPlan extends AbstractQualificationPlan {

    @Autowired
    @Qualifier("simpleQualificationQuery")
    private IQualificationQuery simpleQualificationQuery;

    @Autowired
    @Qualifier("simpleResponseFormator")
    private IResponseFormator simpleResponseFormator;

    @Override
    @QualificationFusing
    public ResponseEntity<PromptResponse> qualification(String params) {
        LogUtil.info("qualification-v1 start params is: "+params);
        QualificationsResponseWrap qrw;
        PromptResponse fqr;
        try {
            Date invokeTime = new Date();
            Long start = System.currentTimeMillis();
            qrw = readyAndQuery(params, simpleQualificationQuery);
            if (reject(qrw)) {
                return ResponseEntity.of(Optional.of(new FormatterQualificationsResponse("0", "reject!")));
            }
            // 根据res中的工号获取人员信息 姓名和部门
            Long end = System.currentTimeMillis();
            Date responseTime = new Date();
            Long costTime = end - start;
            Map<String, Object> map = new HashMap<>();
            map.put("invokeTime", invokeTime);
            map.put("responseTime", responseTime);
            map.put("costTime", costTime);
            map.put("callSystem", UserUtil.getCallSystem());
            map.put("params", params);
            Map<String, String> tipMap = qrw.getTipMap();
            map.putAll(tipMap);
            fqr = simpleResponseFormator.formatResponse(qrw, map);
            fqr.setChangeDes(tipMap.get("changedPersons") == null ? "" : tipMap.get("changedPersons"));
        } catch (Exception exception) {
            fqr = new FormatterQualificationsResponse("0", "Internal Server Error!");
            LogUtil.error("Internal Server Error:" + exception.getMessage(), exception);
            return new ResponseEntity(fqr, HttpStatus.INTERNAL_SERVER_ERROR);
        }
        return ResponseEntity.ok(fqr);
    }
}
