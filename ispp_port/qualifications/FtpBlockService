/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2022. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.qualifications;

import com.alibaba.fastjson.JSON;

import com.huawei.it.jalor5.core.annotation.JalorResource;
import com.huawei.it.jalor5.core.util.CollectionUtil;
import com.huawei.it.jalor5.core.util.StringUtil;
import com.huawei.it.occsafe.common.AnonymizeUtils;
import com.huawei.it.occsafe.dao.ftp.IFtpBlockDao;
import com.huawei.it.occsafe.dao.ftp.IFtpBlockLogDao;
import com.huawei.it.occsafe.dao.portrait.IPersonInfoDao;
import com.huawei.it.occsafe.service.qualifications.IQueryFtpBlockService;
import com.huawei.it.occsafe.util.LogUtil;
import com.huawei.it.occsafe.vo.ftp.FtpBlockLogVO;
import com.huawei.it.occsafe.vo.ftp.FtpBlockVO;
import com.huawei.it.occsafe.vo.portrait.PersonInfoVO;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.http.ResponseEntity;

import javax.inject.Inject;
import javax.inject.Named;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * @author pWX814460
 * @description FtpBlockServiceftp阻断服务
 * @since 2021/11/20 14:34
 */
@Named
@JalorResource(code = "Occ.FtpBlock", desc = "ftp阻断服务")
public class FtpBlockService implements IQueryFtpBlockService {
    @Inject
    private IPersonInfoDao personInfoDao;

    @Inject
    private IFtpBlockDao ftpBlockDao;

    @Inject
    private IFtpBlockLogDao ftpBlockLogDao;

    @Override
    public ResponseEntity<Object> queryFtpBlock(String params) {
        FtpBlockVO ftpBlockVO = null;
        FtpBlockLogVO ftpBlockLogVO = new FtpBlockLogVO();
        List<FtpBlockVO> list = new ArrayList<>();
        ftpBlockLogVO.setStartTime(new Date());
        Long start = System.currentTimeMillis();
        try {
            ftpBlockVO = JSON.parseObject(params, FtpBlockVO.class);
            if (ftpBlockVO == null) {
                return ResponseEntity.ok(list);
            }
            if (StringUtil.isNullOrEmpty(ftpBlockVO.getAbsPath()) || StringUtil.isNullOrEmpty(
                ftpBlockVO.getOperator())) {
                return ResponseEntity.ok("empty params");
            }
            // 参数校验
            // 白名单验证
            // 先跟据人员获取部门，然后取查询部门白名单
            List<String> objects = new ArrayList<>();
            objects.add(AnonymizeUtils.getEmployee(ftpBlockVO.getOperator()));
            List<PersonInfoVO> personInfoListDetail = personInfoDao.getPersonInfoListDetail(objects);
            List<Map<String, String>> ftpInteceptor = new ArrayList<>();
            int ftpInteceptorCount = ftpBlockDao.findFtpInteceptorCount();
            if (!CollectionUtil.isNullOrEmpty(personInfoListDetail)) {
                // 查询部门白名单配置表
                List<String> depts = personInfoListDetail.stream()
                    .map(PersonInfoVO::getDeptFullName)
                    .collect(Collectors.toList());
                // 只能查询属于白名单配置表中的部门人员
                ftpInteceptor = ftpBlockDao.findFtpInteceptor(depts);
            }
            // 白名单中的部门 或者 白名单暂时没有初始化
            if (!CollectionUtils.isEmpty(ftpInteceptor) || ftpInteceptorCount == 0) {
                list = ftpBlockDao.findList(ftpBlockVO);
                if (CollectionUtils.isEmpty(list)) {
                    ftpBlockVO.setIsBubbling("0");
                    list.add(ftpBlockVO);
                } else {
                    ftpBlockVO = list.get(0);
                }
            } else {
                // 非白名单中的部门
                ftpBlockVO.setIsBubbling("0");
                list.add(ftpBlockVO);
            }
            setLogInfo(ftpBlockLogVO, ftpBlockVO);
        } catch (Exception exception) {
            LogUtil.error(exception);
        }
        ftpBlockLogVO.setEndTime(new Date());
        Long end = System.currentTimeMillis();
        ftpBlockLogVO.setCostTime(end - start);
        List<FtpBlockLogVO> vos = new ArrayList<>();
        vos.add(ftpBlockLogVO);
        ftpBlockLogDao.saveFtpBlockLog(vos);
        return ResponseEntity.ok(list);
    }

    private void setLogInfo(FtpBlockLogVO ftpBlockLogVo, FtpBlockVO ftpBlockVO) {
        ftpBlockLogVo.setTaskId(UUID.randomUUID().toString());
        ftpBlockLogVo.setAbsPath(ftpBlockVO.getAbsPath());
        ftpBlockLogVo.setOperator(ftpBlockVO.getOperator());
        ftpBlockLogVo.setResponse(ftpBlockVO.getIsBubbling());
    }
}
