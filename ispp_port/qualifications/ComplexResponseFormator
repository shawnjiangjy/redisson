/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2020. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.qualifications;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.google.common.collect.Lists;

import com.huawei.it.jalor5.core.util.CollectionUtil;
import com.huawei.it.jalor5.core.util.StringUtil;
import com.huawei.it.occsafe.common.AnonymizeUtils;
import com.huawei.it.occsafe.dao.portrait.IPersonInfoDao;
import com.huawei.it.occsafe.dao.qualification.IQualificationsLogDao;
import com.huawei.it.occsafe.enums.MessagePushEnum;
import com.huawei.it.occsafe.service.impl.qualifications.bean.Account;
import com.huawei.it.occsafe.service.impl.qualifications.bean.ComplexFormatterQualificationResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationTip;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationsRequest;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationsResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.QualificationsResponseWrap;
import com.huawei.it.occsafe.service.qualifications.IResponseFormator;
import com.huawei.it.occsafe.util.ThreadUtil;
import com.huawei.it.occsafe.vo.portrait.PersonInfoVO;
import com.huawei.it.occsafe.vo.qualification.QualificationsLogVO;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Service;

import javax.annotation.PreDestroy;
import javax.inject.Inject;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.UUID;
import java.util.concurrent.ExecutorService;
import java.util.stream.Collectors;

/**
 * @author pWX814460
 * @description ComplexResponseFormator
 * @since 2020/11/4 10:19
 */
@Service
public class ComplexResponseFormator implements IResponseFormator<ComplexFormatterQualificationResponse> {

    private static ExecutorService logExecutorService = ThreadUtil.getExecutors(30);

    private static SimplePropertyPreFilter accountfilter = new SimplePropertyPreFilter(Account.class, "appId",
        "accountType", "accountName", "accountCategory", "deviceName");

    private static SimplePropertyPreFilter complexResponsefilter = new SimplePropertyPreFilter(Account.class, "appId",
        "accountType", "accountName", "accountCategory", "deviceName", "des");

    @Inject
    private IPersonInfoDao personInfoDao;

    @Inject
    private IQualificationsLogDao qualificationsLogDao;

    @Override
    public ComplexFormatterQualificationResponse formatResponse(QualificationsResponseWrap qw,
        Map<String, Object> map) {
        map.put("taskId", UUID.randomUUID().toString());
        List<QualificationsResponse> res = qw.getResponse();
        res = LogHandler.handLog(res);
        qw.setResponse(res);
        QualificationsRequest originRequest = qw.getRequest();
        List<String> workNoList = originRequest.getOriginWorkNoList();
        List<PersonInfoVO> personInfos = getPersonInfo(workNoList);
        // 超时处理
        List<Account> result = new ArrayList<>();
        // 返回外包，考试到期，安全承诺书到期提醒
        String examTips = "";
        // 等待优化，迭代时间 参数验证不通过
        ComplexFormatterQualificationResponse responseResult = getResponse(res, result, map, personInfos, originRequest);
        if (responseResult != null ) {
            return responseResult;
        }
        List<QualificationsResponse> failResponseList = res.stream()
            .filter(response -> !response.isFlag())
            .collect(Collectors.toList());
        String code = "";
        // 有违规项
        if (CollectionUtils.isNotEmpty(failResponseList)) {
            Map<String, String> accountHolder = originRequest.getAccountHolder();
            code = "0";
            for (QualificationsResponse response : failResponseList) {
                Account accountInfo = response.getAccountInfo() != null ? response.getAccountInfo() : new Account();
                accountInfo.setDes(response.getMessage());
                String w3Ac = "";
                if (!StringUtil.isNullOrEmpty(response.getW3Account())) {
                    w3Ac = response.getW3Account();
                } else {
                    if (accountHolder != null) {
                        w3Ac = accountHolder.get(response.getAccount());
                    }
                }
                accountInfo.setScenario(response.getScenario());
                accountInfo.setW3account(w3Ac);
                result.add(accountInfo);
            }
            saveLog(personInfos, map, originRequest, res);
        } else {
            // 无违规项
            code = "1";
            examTips = getExamTips(qw);
            saveActiveLog(personInfos, map, originRequest, res, qw.getTipQueue());
        }
        ComplexFormatterQualificationResponse cfqr = new ComplexFormatterQualificationResponse(code, result);
        cfqr.setExamTip(examTips);
        return cfqr;
    }

    private ComplexFormatterQualificationResponse getResponse(List<QualificationsResponse> res, List<Account> result,
        Map<String, Object> map, List<PersonInfoVO> personInfos, QualificationsRequest originRequest) {
        ComplexFormatterQualificationResponse fq3 = get9999ComplexFormatterQualificationResponse(res, result);
        if (fq3 != null) {
            return fq3;
        }
        // 超时
        ComplexFormatterQualificationResponse fq2 = get8ComplexFormatterQualificationResponse(map, res, originRequest,
            personInfos, result);
        if (fq2 != null) {
            return fq2;
        }
        // 未启用
        ComplexFormatterQualificationResponse fq1 = getComplexFormatterQualificationResponse(map, res, originRequest,
            personInfos, result);
        if (fq1 != null) {
            return fq1;
        }
        return null;
    }

    private String getExamTips(QualificationsResponseWrap qw) {
        String examTips = "";
        // 小顶堆排序，队列第一个元素就是优先级最高的提醒消息
        if (!CollectionUtil.isNullOrEmpty(qw.getTipQueue())) {
            examTips = qw.getTipQueue().peek().getTips();
        }
        return examTips;
    }

    private ComplexFormatterQualificationResponse get9999ComplexFormatterQualificationResponse(
        List<QualificationsResponse> res, List<Account> result) {
        ComplexFormatterQualificationResponse cfqr;
        if (CollectionUtils.isNotEmpty(res) && "9999".equalsIgnoreCase(res.get(0).getScenario())) {
            Account account = new Account();
            account.setDes(res.get(0).getErrorMsg());
            result.add(account);
            return new ComplexFormatterQualificationResponse("0", result);
        }
        return null;
    }

    private ComplexFormatterQualificationResponse get8ComplexFormatterQualificationResponse(Map<String, Object> map,
        List<QualificationsResponse> res, QualificationsRequest originRequest, List<PersonInfoVO> personInfos,
        List<Account> result) {
        ComplexFormatterQualificationResponse cfqr;
        if (CollectionUtils.isNotEmpty(res) && "8".equalsIgnoreCase(res.get(0).getScenario())) {
            Account account = new Account();
            account.setDes(res.get(0).getErrorMsg());
            result.add(account);
            cfqr = new ComplexFormatterQualificationResponse("1", result);
            saveActiveLog(personInfos, map, originRequest, res, null);
            return cfqr;
        }
        return null;
    }

    private ComplexFormatterQualificationResponse getComplexFormatterQualificationResponse(Map<String, Object> map,
        List<QualificationsResponse> res, QualificationsRequest originRequest, List<PersonInfoVO> personInfos,
        List<Account> result) {
        ComplexFormatterQualificationResponse cfqr;
        if (CollectionUtils.isNotEmpty(res) && "0".equalsIgnoreCase(res.get(0).getScenario())) {
            Account account = new Account();
            account.setDes(res.get(0).getErrorMsg());
            result.add(account);
            cfqr = new ComplexFormatterQualificationResponse("1", result);
            saveNotAllowedLog(personInfos, map, originRequest, res);
            return cfqr;
        }
        return null;
    }

    private void saveNotAllowedLog(List<PersonInfoVO> personInfos, Map<String, Object> map,
        QualificationsRequest request, List<QualificationsResponse> res) {
        Date invokeTime = (Date) map.get("invokeTime");
        Long costTime = (Long) map.get("costTime");
        Date responseTime = (Date) map.get("responseTime");
        String taskId = (String) map.get("taskId");
        String callSystem = (String) map.get("callSystem");
        List<QualificationsLogVO> logs = new ArrayList<>();
        String errorMsg = "";
        // 存储工号映射
        QualificationsResponse qualificationsResponse = res.get(0);
        // 超时或者验证通过，
        if (CollectionUtils.isNotEmpty(res) && "0".equalsIgnoreCase(qualificationsResponse.getScenario())) {
            errorMsg = res.get(0).getErrorMsg();
        }
        List<Account> accounts = request.getAccount();
        String w3account = request.getW3account();
        String[] split = w3account.split(",");
        for (String strValue : split) {
            for (Account account : accounts) {
                QualificationsLogVO qualificationsLogVO = new QualificationsLogVO();
                qualificationsLogVO.setTaskId(taskId);
                qualificationsLogVO.setResultMessage("1");
                qualificationsLogVO.setAccountResultMessage("1");
                qualificationsLogVO.setAccount(strValue);
                setPersonInfo(personInfos, AnonymizeUtils.getEmployee(strValue), qualificationsLogVO);
                qualificationsLogVO.setArea(request.getArea());
                qualificationsLogVO.setInvokeTime(invokeTime);
                qualificationsLogVO.setCostTime(costTime);
                qualificationsLogVO.setResponseTime(responseTime);
                qualificationsLogVO.setScenario(qualificationsResponse.getScenario());
                qualificationsLogVO.setAccountInfo(JSON.toJSONString(account, accountfilter));
                qualificationsLogVO.setUserAccount(request.getUserW3());
                qualificationsLogVO.setCallSystem(callSystem);
                qualificationsLogVO.setSystemId(request.getSystemId());
                qualificationsLogVO.setErrorDescription(errorMsg);
                logs.add(qualificationsLogVO);
            }
        }
        if (!org.apache.commons.collections.CollectionUtils.isEmpty(logs)) {
            logs = handLogs(logs);
            partitionLog(logs);
        }
    }

    private void saveActiveLog(List<PersonInfoVO> personInfos, Map<String, Object> map, QualificationsRequest request,
        List<QualificationsResponse> res, PriorityQueue<QualificationTip> queue) {
        List<QualificationsLogVO> logs = new ArrayList<>();
        // 超时或者验证通过，
        String errorMsg = "";
        if (CollectionUtils.isNotEmpty(res) && "8".equalsIgnoreCase(res.get(0).getScenario())) {
            errorMsg = res.get(0).getErrorMsg();
        }
        Map<String, List<QualificationsResponse>> resultCollect = res.stream()
            .collect(Collectors.groupingBy(QualificationsResponse::getAccount));
        for (Map.Entry<String, List<QualificationsResponse>> entry : resultCollect.entrySet()) {
            List<QualificationsResponse> value = entry.getValue();
            Map<Integer, List<QualificationsResponse>> collect = value.stream()
                .collect(Collectors.groupingBy(QualificationsResponse::getAccountSign));
            for (Map.Entry<Integer, List<QualificationsResponse>> entryQr : collect.entrySet()) {
                List<QualificationsResponse> responses = entryQr.getValue();
                QualificationsResponse qualificationsResponse = responses.get(0);
                QualificationsLogVO logVo = doLog(map, personInfos, request, errorMsg, qualificationsResponse, queue);
                logs.add(logVo);
            }
        }
        if (!org.apache.commons.collections.CollectionUtils.isEmpty(logs)) {
            logs = handLogs(logs);
            partitionLog(logs);
        }
    }

    private QualificationsLogVO doLog(Map<String, Object> map, List<PersonInfoVO> personInfos,
        QualificationsRequest request, String errorMsg, QualificationsResponse qualificationsResponse, PriorityQueue<QualificationTip> queue) {
        Map<String, String> accountHolder = request.getAccountHolder();
        Date invokeTime = (Date) map.get("invokeTime");
        Date responseTime = (Date) map.get("responseTime");
        Long costTime = (Long) map.get("costTime");
        String taskId = (String) map.get("taskId");
        String callSystem = (String) map.get("callSystem");
        String remindTips = map.get("changedPersons") != null ? (String) map.get("changedPersons") : "";
        String tipCode = map.get("tip") != null ? (String) map.get("tip") : "";
        Account accountInfo = qualificationsResponse.getAccountInfo();
        QualificationsLogVO logVo = new QualificationsLogVO();
        logVo.setTaskId(taskId);
        logVo.setResultMessage("1");
        logVo.setAccountResultMessage(StringUtil.isNullOrEmpty(tipCode) ? "1" : tipCode);
        String workNo = qualificationsResponse.getAccount();
        String account = accountHolder.get(workNo) == null ? workNo : accountHolder.get(workNo);
        logVo.setAccount(account);
        setPersonInfo(personInfos, workNo, logVo);
        logVo.setCostTime(costTime);
        logVo.setInvokeTime(invokeTime);
        logVo.setArea(request.getArea());
        logVo.setAccountInfo(JSON.toJSONString(accountInfo, accountfilter));
        logVo.setAppId(accountInfo != null ? accountInfo.getAppId() : "");
        logVo.setUserAccount(request.getUserW3());
        logVo.setSystemId(request.getSystemId());
        logVo.setResponseTime(responseTime);
        logVo.setErrorDescription(errorMsg);
        logVo.setScenario(qualificationsResponse.getScenario());
        logVo.setCallSystem(callSystem);
        logVo.setIsChangedPersonDoApply(remindTips);
        // 设置提醒标签字段
        String warningTips = "";
        if (!CollectionUtil.isNullOrEmpty(queue)) {
            warningTips = queue.peek().getTips();
            String tips = "";
            StringBuilder sb = new StringBuilder();
            while (!queue.isEmpty()) {
                QualificationTip poll = queue.poll();
                sb.append(poll.getLevel()+",");
            }
            tips = sb.length()>0? sb.toString().substring(0,sb.length()-1):"";
            logVo.setTipCode(tips);
            // 封装提醒场景
            StringBuilder sbs = new StringBuilder();
            String [] tipCodes = tips.split(",");
            for (int i = 0; i <tipCodes.length ; i++) {
                sbs.append(MessagePushEnum.getDes(tipCodes[i])+",");
            }
            logVo.setTipScenario(sbs.toString());
        }
        // 提醒描述
        logVo.setExpireDay(warningTips);
        return logVo;
    }

    private List<PersonInfoVO> getPersonInfo(List<String> workNos) {
        List<PersonInfoVO> personInfoListDetail = new ArrayList<>();
        if (org.apache.commons.collections.CollectionUtils.isNotEmpty(workNos)) {
            personInfoListDetail = personInfoDao.getPersonInfoListDetail(workNos);
        }
        return personInfoListDetail;
    }

    private void setPersonInfo(List<PersonInfoVO> persons, String workNo, QualificationsLogVO logVo) {
        if (CollectionUtils.isNotEmpty(persons)) {
            for (PersonInfoVO personInfoVo : persons) {
                if (workNo.equalsIgnoreCase(personInfoVo.getEmployeeNumber())) {
                    logVo.setName(personInfoVo.getChineseName());
                    logVo.setDept(personInfoVo.getDeptFullName());
                    break;
                }
            }
        }
    }

    private void saveLog(List<PersonInfoVO> personInfos, Map<String, Object> map, QualificationsRequest request,
        List<QualificationsResponse> result) {
        Date invokeTime = (Date) map.get("invokeTime");
        Date responseTime = (Date) map.get("responseTime");
        String taskId = (String) map.get("taskId");
        Long costTime = (Long) map.get("costTime");
        String callSystem = (String) map.get("callSystem");
        List<QualificationsLogVO> logs = new ArrayList<>();
        // 有违规项
        Map<String, List<QualificationsResponse>> resultCollect = result.stream()
            .collect(Collectors.groupingBy(QualificationsResponse::getAccount));
        Map<String, String> accountHolder = request.getAccountHolder();
        for (Map.Entry<String, List<QualificationsResponse>> entry : resultCollect.entrySet()) {
            List<QualificationsResponse> value = entry.getValue();
            Map<Integer, List<QualificationsResponse>> collect = value.stream()
                .collect(Collectors.groupingBy(QualificationsResponse::getAccountSign));
            for (Map.Entry<Integer, List<QualificationsResponse>> entryQr : collect.entrySet()) {
                List<QualificationsResponse> responses = entryQr.getValue();
                List<Account> acs = new ArrayList<>();
                QualificationsLogVO logVo = new QualificationsLogVO();
                logVo.setTaskId(taskId);
                logVo.setResponseTime(responseTime);
                logVo.setCostTime(costTime);
                logVo.setInvokeTime(invokeTime);
                logVo.setCallSystem(callSystem);
                logVoSet(personInfos, request, accountHolder, responses, acs, logVo);
                logs.add(logVo);
            }
        }
        if (!org.apache.commons.collections.CollectionUtils.isEmpty(logs)) {
            logs = handLogs(logs);
            partitionLog(logs);
        }
    }

    private void logVoSet(List<PersonInfoVO> personInfos, QualificationsRequest request,
        Map<String, String> accountHolder, List<QualificationsResponse> responses, List<Account> acs,
        QualificationsLogVO logVo) {
        Map<Boolean, List<QualificationsResponse>> statusCollect = responses.stream()
            .collect(Collectors.groupingBy(QualificationsResponse::isFlag));
        List<QualificationsResponse> failedCollect = statusCollect.get(false) != null
            ? statusCollect.get(false)
            : new ArrayList<>();
        logVo.setAccountResultMessage("1");
        logVo.setResultMessage("1");
        if (CollectionUtils.isNotEmpty(failedCollect)) {
            logVo.setAccountResultMessage("0");
            logVo.setResultMessage("0");
            failedCollect.forEach(item -> {
                Account accountInfo = item.getAccountInfo();
                acs.add(accountInfo);
            });
        }
        QualificationsResponse qualificationsResponse = responses.get(0);
        Account accountInfo = qualificationsResponse.getAccountInfo();
        accountInfo = accountInfo != null ? accountInfo : new Account();
        logVo.setScenario(qualificationsResponse.getScenario());
        String workNo = qualificationsResponse.getAccount();
        logVo.setAccount(accountHolder.get(workNo));
        setPersonInfo(personInfos, workNo, logVo);
        logVo.setSystemId(request.getSystemId());
        logVo.setArea(request.getArea());
        logVo.setUserAccount(request.getUserW3());
        logVo.setAccountInfo(JSON.toJSONString(accountInfo, accountfilter));
        logVo.setAppId(accountInfo.getAppId());
        if (CollectionUtils.isNotEmpty(acs)) {
            logVo.setComplexResponse(JSON.toJSONString(acs, complexResponsefilter));
        }
    }

    /**
     * des
     */
    @PreDestroy
    private void des() {
        ThreadUtil.close(logExecutorService, this.getClass());
    }

    private void partitionLog(List<QualificationsLogVO> logs) {
        if (!logExecutorService.isShutdown()) {
            logExecutorService.execute(() -> {
                List<List<QualificationsLogVO>> partition = Lists.partition(logs, 400);
                partition.stream().forEach(partitionLogs -> {
                    qualificationsLogDao.saveQualificationsLog(partitionLogs);
                });
            });
        }
    }

    /*
    * 针对既满足变更系统调用场景又满足其他校验场景情况下，
    * 如果所以场景都成功优先记录变更系统调用场景
    * 如果有失败的则取调用失败的日志记录
    * */
    private  List<QualificationsLogVO> handLogs(List<QualificationsLogVO> logs){
        List<QualificationsLogVO> result = new ArrayList<>();
        List<QualificationsLogVO> fails = new ArrayList<>();
        for (QualificationsLogVO log:logs) {
            if("0".equals(log.getResultMessage())){
                fails.add(log);
            }
        }
        if (CollectionUtils.isNotEmpty(fails)){
            result.add(fails.get(0));
        }else {
            result.add(logs.get(0));
        }
        return result;
    }
}
