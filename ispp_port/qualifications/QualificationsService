/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2022. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.qualifications;

import com.alibaba.fastjson.JSON;

import com.huawei.it.jalor5.core.annotation.JalorResource;
import com.huawei.it.jalor5.core.cache.redis.core.JalorRedisTemplate;
import com.huawei.it.jalor5.core.cache.redis.core.JalorRedisTemplateFactory;
import com.huawei.it.occsafe.dao.eleflow.IFilingEFlowDao;
import com.huawei.it.occsafe.dao.risk.IRiskHandlerEleDao;
import com.huawei.it.occsafe.service.common.ICommonService;
import com.huawei.it.occsafe.service.eleflow.IBeforeProcessor;
import com.huawei.it.occsafe.service.impl.eleflow.AEle;
import com.huawei.it.occsafe.service.impl.eleflow.EleFrame;
import com.huawei.it.occsafe.service.impl.eleflow.exception.BeforeProcessorException;
import com.huawei.it.occsafe.service.impl.qualifications.bean.ComplexFormatterQualificationResponse;
import com.huawei.it.occsafe.service.impl.qualifications.bean.FormatterQualificationsResponse;
import com.huawei.it.occsafe.service.qualifications.IQualificationPlan;
import com.huawei.it.occsafe.util.LogUtil;
import com.huawei.it.occsafe.util.RedisUtil;
import com.huawei.it.occsafe.vo.ResultVo;
import com.huawei.it.occsafe.vo.eleflow.FilingEleVO;
import com.huawei.it.occsafe.vo.risk.RiskHandlerEleVO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.ResponseEntity;

import javax.inject.Inject;
import javax.inject.Named;

import java.util.ArrayList;
import java.util.List;

/**
 * @author pWX814460
 * @description QualificationsService
 * @since 2020/11/3 14:34
 */
@Named
@JalorResource(code = "Occ.Qualifications", desc = "对外查询服务")
public class QualificationsService implements ICommonService {

    @Inject
    private IRiskHandlerEleDao riskHandlerEleDao;

    @Autowired
    @Qualifier("simpleQualificationPlan")
    private IQualificationPlan simpleQualificationPlan;

    @Autowired
    @Qualifier("complexQualificationPlan")
    private IQualificationPlan complexQualificationPlan;

    @Autowired
    @Qualifier("riskHandlerEleWorkNoBeforeProcessor")
    private IBeforeProcessor riskHandlerEleWorkNoBeforeProcessor;

    @Autowired
    @Qualifier("filingEFlowWorkNoBeforeProcessor")
    private IBeforeProcessor filingEFlowWorkNoBeforeProcessor;

    @Inject
    private IFilingEFlowDao filingEFlowDao;

    @Inject
    private RedisUtil redisUtil;

    /**
     * queryQualification
     *
     * @param params 参数
     * @return 结果集
     */
    @Override
    public ResponseEntity<FormatterQualificationsResponse> queryQualification(String params) {
        return simpleQualificationPlan.qualification(params);
    }

    @Override
    public ResponseEntity<ComplexFormatterQualificationResponse> queryComplexQualification(String params) {
        return complexQualificationPlan.qualification(params);
    }

    @Override
    public ResultVo<Object> clearCache(String params) {
        try {
            JalorRedisTemplate jalorRedisTemplate = JalorRedisTemplateFactory.getInstance(null);
            jalorRedisTemplate.clear("examrecord");
        } catch (Exception exception) {
            return new ResultVo<>(false, exception.getMessage());
        }
        return new ResultVo<>(true);
    }

    @Override
    public ResultVo<Object> filingEFlow(String paramsO) {
        // 集成电子流的数据
        // 0: 打印参数，可以放到异步任务里面，以免影响任务流程
        // 1: 检验参数并且解析参数
        // 2: 特殊参数格式化
        // 3: 集成以前的前置操作,非必须
        // 4: 根据电子流参数类型调用对应的电子流集成服务
        // 5: 集成以后的后续操作，非必须
        LogUtil.info("filingEFlow paramsO info:" + paramsO);
        String params = paramsO.replace("\\\\", "\\");
        LogUtil.info("filingEFlow params info:" + params);
        FilingEleVO filingEleVo = JSON.parseObject(params, FilingEleVO.class);

        List<FilingEleVO> list = new ArrayList();
        list.add(filingEleVo);
        List<IBeforeProcessor> befores = new ArrayList<>();
        befores.add(filingEFlowWorkNoBeforeProcessor);
        // 识别uuid类型的工号，需要调用转换服务
        EleFrame<FilingEleVO, AEle> filingEleVOAEleEleFrame = new EleFrame<>(befores, null, null);
        try {
            filingEleVOAEleEleFrame.ele(list, new AEle(filingEFlowDao));
        } catch (BeforeProcessorException beforeProcessorException) {
            return new ResultVo(false, beforeProcessorException.getMessage());
        } catch (Exception exception) {
            return new ResultVo(false, exception.getMessage());
        }
        return new ResultVo(true);
    }

    @Override
    public ResultVo<Object> riskHandlerEle(RiskHandlerEleVO riskHandlerEleVO) {
        String riskHandlerEleVoStr = JSON.toJSONString(riskHandlerEleVO);
        LogUtil.info("riskHandlerEle info:" + riskHandlerEleVoStr);
        List<RiskHandlerEleVO> list = new ArrayList();
        list.add(riskHandlerEleVO);
        List<IBeforeProcessor> befores = new ArrayList<>();
        befores.add(riskHandlerEleWorkNoBeforeProcessor);
        // 识别uuid类型的工号，需要调用转换服务
        EleFrame<RiskHandlerEleVO, AEle> riskHandlerEleVOAEleEleFrame = new EleFrame<>(befores, null, null);
        try {
            riskHandlerEleVOAEleEleFrame.ele(list, new AEle(riskHandlerEleDao));
        } catch (BeforeProcessorException beforeProcessorException) {
            return new ResultVo(false, beforeProcessorException.getMessage());
        } catch (Exception exception) {
            return new ResultVo(false, exception.getMessage());
        }
        return new ResultVo(true);
    }
}
