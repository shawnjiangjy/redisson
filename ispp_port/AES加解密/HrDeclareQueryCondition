/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.declare;

import com.huawei.it.jalor5.core.config.ApplicationConfigProperties;
import com.huawei.it.jalor5.core.util.StringUtil;
import com.huawei.it.occsafe.util.AesgcmUtil;
import com.huawei.it.occsafe.vo.declare.HrDeclareCalcVO;
import com.huawei.it.occsafe.vo.declare.HrDeclareVO;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.UUID;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * @author pwx814460
 * @description aes加解密应用
 * @since 2021/05/11 15:32
 */
@Component
public class HrDeclareQueryCondition {

    private static final String ISPP_EMPLOYEE_SECURITY = "ispp_employee_security";

    private static final String ISPP_EMPLOYEE_SECURITY_KEY = "ispp.employee.security.key";

    private static final String HIGH_RISK_MEMBER = "Y";

    private static String key = "";

    @PostConstruct
    private void getKey() {
        key = getJ2c(ISPP_EMPLOYEE_SECURITY);
    }

    /**
     * 获取j2c密码
     *
     * @param configKey 配置中心或者配置文件的键
     * @return 返回键值对的值
     */
    public static String getJ2c(String configKey) {
        String contextProperty = ApplicationConfigProperties.getContextProperty(ISPP_EMPLOYEE_SECURITY_KEY);
        String isppEmployeeSecurityKey = String.format(Locale.ROOT, contextProperty, configKey);
        return ApplicationConfigProperties.getContextProperty(isppEmployeeSecurityKey);
    }

    /**
     * 根据传入的条件过滤encrylist
     *
     * @param encrylist 加密集合
     * @param hrDeclareVO 请求参数
     * @return 返回过滤集
     */
    public static List<HrDeclareCalcVO> query(List<HrDeclareCalcVO> encrylist, HrDeclareVO hrDeclareVO) {
        if (CollectionUtils.isEmpty(encrylist)) {
            return encrylist;
        }
        // 解密数据
        List<HrDeclareCalcVO> decrylist = decrylist(encrylist);
        List<Predicate<HrDeclareVO>> predicates = getAllPredicate(hrDeclareVO);
        Stream<HrDeclareCalcVO> stream = decrylist.stream();
        // 根据条件过滤
        for (Predicate<HrDeclareVO> pres : predicates) {
            stream = stream.filter(pres);
        }
        return stream.collect(Collectors.toList());
    }

    /**
     * 排序并获取区间段的记录
     *
     * @param decrylist 数据集
     * @param page 页数
     * @param pageSize 每一页数量
     * @return 分页数据
     */
    public static List<HrDeclareCalcVO> orderAndSplit(List<HrDeclareCalcVO> decrylist, int page, int pageSize) {
        if (CollectionUtils.isEmpty(decrylist)) {
            return decrylist;
        }
        int totalSize = decrylist.size();
        if (pageSize == 0) {
            return new ArrayList<>();
        }
        double ceilDouble = new BigDecimal((float) totalSize / pageSize).setScale(2, BigDecimal.ROUND_HALF_UP)
            .doubleValue();
        int ceil = (int) Math.ceil(ceilDouble);
        if (page > ceil) {
            return new ArrayList<>();
        }
        // 按申报时间降序排序
        List<HrDeclareCalcVO> sortedList = decrylist.stream()
            .sorted(Comparator.comparing(HrDeclareCalcVO::getDeclareTime).reversed())
            .collect(Collectors.toList());
        if (sortedList.size() == 1) {
            return sortedList;
        }
        int rowEnd = page * pageSize > sortedList.size() ? sortedList.size() : (page * pageSize);
        return sortedList.subList((page - 1) * pageSize, rowEnd);
    }

    /**
     * 获取所有过滤条件，添加空处理
     *
     * @param hrDeclareVO 请求参数
     * @return 返回所有的过滤条件
     */
    private static List<Predicate<HrDeclareVO>> getAllPredicate(HrDeclareVO hrDeclareVO) {
        List<Predicate<HrDeclareVO>> predicates = new ArrayList<>();
        predicates.add(condition -> {
            if (StringUtil.isNullOrEmpty(hrDeclareVO.getName())) {
                return true;
            }
            return hrDeclareVO.getName().equals(condition.getName());
        });
        predicates.add(condition -> {
            if (StringUtil.isNullOrEmpty(hrDeclareVO.getDeclarePerson())) {
                return true;
            }
            return hrDeclareVO.getDeclarePerson().contains(condition.getDeclarePerson());
        });
        predicates.add(condition -> {
            if (StringUtil.isNullOrEmpty(hrDeclareVO.getBusinessDirector())) {
                return true;
            }
            return hrDeclareVO.getBusinessDirector().equals(condition.getBusinessDirector());
        });
        predicates.add(condition -> {
            if (StringUtil.isNullOrEmpty(hrDeclareVO.getWorkNo())) {
                return true;
            }
            return hrDeclareVO.getWorkNo().equals(condition.getWorkNo());
        });
        predicates.add(condition -> {
            if (StringUtil.isNullOrEmpty(hrDeclareVO.getDeclareStatus())) {
                return true;
            }
            return hrDeclareVO.getDeclareStatus().contains(condition.getDeclareStatus());
        });
        declareTimeCondition(hrDeclareVO, predicates);
        highRiskMemberCondition(hrDeclareVO, predicates);
        assessmentCycleCondition(hrDeclareVO,predicates);
        assessmentTypesCondition(hrDeclareVO,predicates);
        processStatusCondition(hrDeclareVO,predicates);
        return predicates;
    }

    private static void declareTimeCondition(HrDeclareVO hrDeclareVO, List<Predicate<HrDeclareVO>> predicates) {
        predicates.add(condition -> {
            String declareTimeStart = hrDeclareVO.getDeclareTimeStart();
            String declareTimeEnd = hrDeclareVO.getDeclareTimeEnd();
            String declareTime = condition.getDeclareTime();
            if (StringUtils.isAnyBlank(declareTimeStart, declareTimeEnd)) {
                return true;
            }
            return declareTime.compareTo(declareTimeStart) >= 0 && declareTime.compareTo(declareTimeEnd) <= 0;
        });
    }

    private static void highRiskMemberCondition(HrDeclareVO hrDeclareVO, List<Predicate<HrDeclareVO>> predicates) {
        predicates.add(condition -> {
            String highRiskMember = hrDeclareVO.getHighRiskMember();
            if (StringUtil.isNullOrEmpty(highRiskMember)) {
                return true;
            }
            if (HIGH_RISK_MEMBER.equals(highRiskMember)) {
                return highRiskMember.equals(condition.getHighRiskMember());
            }
            return !HIGH_RISK_MEMBER.equals(condition.getHighRiskMember()) || StringUtil.isNullOrEmpty(
                condition.getHighRiskMember());
        });
    }

    private static void assessmentCycleCondition(HrDeclareVO hrDeclareVO, List<Predicate<HrDeclareVO>> predicates) {
        predicates.add(condition -> {
            // 如果（考核周期）这个查询参数为null或者是空串，说明页面没有这个筛选条件，则所有数据return true,保留所有数据
            if (StringUtil.isNullOrEmpty(hrDeclareVO.getAssessmentCycle())) {
                return true;
            }
            // assessmentCycles 页面下拉框传过来的（考核周期）参数，用于筛选数据
            String[] assessmentCycles = hrDeclareVO.getAssessmentCycle().split(",");
            if (StringUtil.isNullOrEmpty(condition.getAssessmentCycle())) {
                // 在前台页面传入了考核周期条件筛选数据的条件下，如果数据库里的数据的（考核周期）为null，就返回false，过滤掉这条数据
                return false;
            }
            // 如果页面查询条件（考核周期）包含该条数据的（考核周期），返回true,这条数据是用户想要的，保留
            return Arrays.asList(assessmentCycles).contains(condition.getAssessmentCycle());
        });
    }

    private static void assessmentTypesCondition(HrDeclareVO hrDeclareVO, List<Predicate<HrDeclareVO>> predicates) {
        predicates.add(condition -> {
            // 如果（考核类型）这个查询参数为null或者是空串，说明页面没有这个筛选条件，则所有数据return true,保留所有数据
            if (StringUtil.isNullOrEmpty(hrDeclareVO.getAssessmentType())) {
                return true;
            }
            // assessmentTypes 页面下拉框传过来的（考核类型）参数，用于筛选数据
            String[] assessmentTypes = hrDeclareVO.getAssessmentType().split(",");
            if (StringUtil.isNullOrEmpty(condition.getAssessmentType())) {
                // 在前台页面传入了考核类型条件筛选数据的条件下，如果数据库里的数据的（考核类型）为null，就返回false，过滤掉这条数据
                return false;
            }
            // 如果页面查询条件（考核类型）包含该条数据的（考核类型），返回true,这条数据是用户想要的，保留
            return Arrays.asList(assessmentTypes).contains(condition.getAssessmentType());
        });
    }

    /**
     * 流程状态条件过滤数据
     */
    private static void processStatusCondition(HrDeclareVO hrDeclareVO, List<Predicate<HrDeclareVO>> predicates) {
        predicates.add(condition -> {
            if (StringUtil.isNullOrEmpty(hrDeclareVO.getProcessStatus())) {
                return true;
            }
            String[] processStatus = hrDeclareVO.getProcessStatus().split(",");
            if (StringUtil.isNullOrEmpty(condition.getProcessStatus())) {
                // 在前台页面传入了流程状态条件筛选数据的条件下，如果数据库里的数据的（流程状态）为null，就返回false，过滤掉这条数据
                return false;
            }
            // 如果页面查询条件（流程状态）包含该条数据的（流程状态），返回true,这条数据是用户想要的，保留
            return Arrays.asList(processStatus).contains(condition.getProcessStatus());
        });
    }

    /**
     * 解密集合
     *
     * @param encrylist 集合
     * @return 解密的结合
     */
    public static List<HrDeclareCalcVO> decrylist(List<HrDeclareCalcVO> encrylist) {
        if (CollectionUtils.isEmpty(encrylist)) {
            return encrylist;
        }
        // 解密数据
        encrylist.stream().forEach(hrd -> {
            // key(key=ispp123456) key = 3fF0rts@t0_Bu1!d
            hrd.setName(StringUtil.isNullOrEmpty(hrd.getName()) ? "" : AesgcmUtil.decrypyByGcm(hrd.getName(), key));
            hrd.setWorkNo(
                StringUtil.isNullOrEmpty(hrd.getWorkNo()) ? "" : AesgcmUtil.decrypyByGcm(hrd.getWorkNo(), key));
            hrd.setBusinessDirector(StringUtil.isNullOrEmpty(hrd.getBusinessDirector())
                ? ""
                : AesgcmUtil.decrypyByGcm(hrd.getBusinessDirector(), key));
            hrd.setDeclarePerson(StringUtil.isNullOrEmpty(hrd.getDeclarePerson())
                ? ""
                : AesgcmUtil.decrypyByGcm(hrd.getDeclarePerson(), key));
            hrd.setCause(StringUtil.isNullOrEmpty(hrd.getCause()) ? "" : AesgcmUtil.decrypyByGcm(hrd.getCause(), key));
            hrd.setDetail(
                StringUtil.isNullOrEmpty(hrd.getDetail()) ? "" : AesgcmUtil.decrypyByGcm(hrd.getDetail(), key));
        });
        return encrylist;
    }

    /**
     * 加密集合
     *
     * @param list 集合
     * @return 返回加密集合
     */
    public static List<HrDeclareVO> encrylistH(List<HrDeclareVO> list) {
        if (CollectionUtils.isEmpty(list)) {
            return list;
        }
        // 加密数据
        list.stream().forEach(hrd -> {
            set(hrd);
        });
        return list;
    }

    /**
     * 加密集合
     *
     * @param list 集合
     * @return 返回加密集合
     */
    public static List<HrDeclareCalcVO> encrylist(List<HrDeclareCalcVO> list) {
        if (CollectionUtils.isEmpty(list)) {
            return list;
        }
        // 加密数据
        list.stream().forEach(hrd -> {
            set(hrd);
        });
        return list;
    }

    private static void set(HrDeclareVO hrd) {
        if (hrd != null) {
            hrd.setId(StringUtil.isNullOrEmpty(hrd.getWorkNo()) ? UUID.randomUUID().toString() : AesgcmUtil.encryptByGcm(hrd.getWorkNo(), key));
            hrd.setName(StringUtil.isNullOrEmpty(hrd.getName()) ? "" : AesgcmUtil.encryptByGcm(hrd.getName(), key));
            hrd.setWorkNo(
                StringUtil.isNullOrEmpty(hrd.getWorkNo()) ? "" : AesgcmUtil.encryptByGcm(hrd.getWorkNo(), key));
            hrd.setBusinessDirector(StringUtil.isNullOrEmpty(hrd.getBusinessDirector())
                ? ""
                : AesgcmUtil.encryptByGcm(hrd.getBusinessDirector(), key));
            hrd.setDeclarePerson(StringUtil.isNullOrEmpty(hrd.getDeclarePerson())
                ? ""
                : AesgcmUtil.encryptByGcm(hrd.getDeclarePerson(), key));
            hrd.setCause(StringUtil.isNullOrEmpty(hrd.getCause()) ? "" : AesgcmUtil.encryptByGcm(hrd.getCause(), key));
            hrd.setDetail(
                StringUtil.isNullOrEmpty(hrd.getDetail()) ? "" : AesgcmUtil.encryptByGcm(hrd.getDetail(), key));
        }
    }

    /**
     * 加密单个字符串
     *
     * @param str 加密字符串
     * @return 返回加密字符串
     */
    public static String encry(String str) {
        if (StringUtil.isNullOrEmpty(str)) {
            return str;
        }
        return AesgcmUtil.encryptByGcm(str, key);
    }
}

