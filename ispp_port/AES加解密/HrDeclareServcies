/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2022. All rights reserved.
 */

package com.huawei.it.occsafe.service.impl.declare;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

import com.huawei.it.jalor5.core.annotation.JalorOperation;
import com.huawei.it.jalor5.core.annotation.JalorResource;
import com.huawei.it.jalor5.core.base.PageVO;
import com.huawei.it.jalor5.core.base.PagedResult;
import com.huawei.it.jalor5.core.exception.ApplicationException;
import com.huawei.it.jalor5.core.util.CollectionUtil;
import com.huawei.it.jalor5.core.util.DateUtil;
import com.huawei.it.jalor5.core.util.StringUtil;
import com.huawei.it.occsafe.common.AnonymizeUtils;
import com.huawei.it.occsafe.dao.declare.IHrDeclareDao;
import com.huawei.it.occsafe.dao.eleflow.IChangedPersonDao;
import com.huawei.it.occsafe.dao.portrait.IPortraitDetailDao;
import com.huawei.it.occsafe.service.IMessagePushService;
import com.huawei.it.occsafe.service.declare.IHrDeclareService;
import com.huawei.it.occsafe.service.security.IEmployeeRecordService;
import com.huawei.it.occsafe.util.LogUtil;
import com.huawei.it.occsafe.util.UserUtil;
import com.huawei.it.occsafe.vo.MessagePushVO;
import com.huawei.it.occsafe.vo.ResultVo;
import com.huawei.it.occsafe.vo.declare.HrDeclareCalcVO;
import com.huawei.it.occsafe.vo.declare.HrDeclareVO;
import com.huawei.it.occsafe.vo.eleflow.ChangedPersonnelVO;
import com.huawei.it.occsafe.vo.portrait.PortraitDetailVO;

import org.apache.commons.collections4.CollectionUtils;

import javax.inject.Inject;
import javax.inject.Named;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * @author pwx814460
 * @description ftp文件上传下载操作记录
 * @since 2021/05/11 15:32
 */
@Named
@JalorResource(code = "Occ.HrDeclare", desc = "hr申报信息")
public class HrDeclareServcies implements IHrDeclareService {

    // 审视中，已审视（业务主管能看审视状态为审视中和已审视的数据）
    public static final String CANREAD_DECLARESTATUS = "REVIEWING,REVIEWED";

    @Inject
    private IHrDeclareDao hrDeclareDao;

    @Inject
    private IPortraitDetailDao portraitDetailDao;

    @Inject
    private IMessagePushService messagePushService;

    @Inject
    private IChangedPersonDao changedPersonDao;

    @Inject
    private IEmployeeRecordService employeeRecordService;

    @Override
    @JalorOperation(code = "findHrDeclareRecordsPageList", desc = "查询hr申报人员分页信息")
    public PagedResult<HrDeclareCalcVO> findHrDeclareRecordsPageList(String params, int pageSize, int curPage)
        throws ApplicationException {
        PagedResult<HrDeclareCalcVO> pagedResult = new PagedResult();
        try {
            PageVO pageVO = new PageVO();
            pageVO.setCurPage(curPage);
            pageVO.setPageSize(pageSize);
            HrDeclareVO ivo = JSONObject.parseObject(params, HrDeclareVO.class);
            String currentLoginAccount = AnonymizeUtils.getEmployee(UserUtil.getUserInfo());
            List<HrDeclareCalcVO> list = hrDeclareDao.findList();
            // 只能查看申报人为当前登陆人的记录
            List<String> workNumber = new ArrayList<>();
            workNumber.add(currentLoginAccount);
            ivo.setDeclarePerson(String.join(",",employeeRecordService.getOldAndNewWorknumber(workNumber)));
            List<HrDeclareCalcVO> decryList = HrDeclareQueryCondition.query(list, ivo);
            pageVO.setTotalRows(decryList.size());
            List<HrDeclareCalcVO> splitList = HrDeclareQueryCondition.orderAndSplit(decryList, curPage, pageSize);
            pagedResult.setResult(splitList);
            pagedResult.setPageVO(pageVO);
        } catch (Exception exception) {
            LogUtil.error("Failed to query findHrDeclareRecordsPageList details.", exception);
        }
        return pagedResult;
    }

    @Override
    @JalorOperation(code = "findHandlingAndProgressPageList", desc = "查询处理与进展信息")
    public PagedResult<HrDeclareCalcVO> findHandlingAndProgressPageList(String params, int pageSize, int curPage)
        throws ApplicationException {
        PagedResult<HrDeclareCalcVO> pagedResult = new PagedResult();
        try {
            PageVO pageVO = new PageVO();
            pageVO.setCurPage(curPage);
            pageVO.setPageSize(pageSize);
            HrDeclareVO ivo = JSONObject.parseObject(params, HrDeclareVO.class);
            ivo.setHighRiskMember("N");
            List<HrDeclareCalcVO> list = hrDeclareDao.findList();
            List<HrDeclareCalcVO> decryList = HrDeclareQueryCondition.query(list, ivo);
            pageVO.setTotalRows(decryList.size());
            List<HrDeclareCalcVO> splitList = HrDeclareQueryCondition.orderAndSplit(decryList, curPage, pageSize);
            pagedResult.setResult(splitList);
            pagedResult.setPageVO(pageVO);
        } catch (Exception exception) {
            LogUtil.error("Failed to query findAllDeclareRecordsPageList details.", exception);
        }
        return pagedResult;
    }

    @Override
    @JalorOperation(code = "findHrDeclareCalcPageList", desc = "查询hr申报信息以及汇总信息列表")
    public PagedResult<HrDeclareCalcVO> findHrDeclareCalcPageList(String params, int pageSize, int curPage)
        throws ApplicationException {
        PagedResult<HrDeclareCalcVO> result = new PagedResult();
        try {
            PageVO pageVO = new PageVO();
            pageVO.setCurPage(curPage);
            pageVO.setPageSize(pageSize);
            HrDeclareCalcVO ivo = JSONObject.parseObject(params, HrDeclareCalcVO.class);
            // 前台获取的登录用户
            String currentLoginAccount = ivo.getUserAccount();
            if (StringUtil.isNullOrEmpty(currentLoginAccount)) {
                // 前台没有获取到就去后台获取登录用户
                currentLoginAccount = AnonymizeUtils.getEmployee(UserUtil.getUserInfo());
            }
            // 只能查看业务主管为当前登陆人的记录
            ivo.setBusinessDirector(currentLoginAccount);
            // 业务修改：DTS2023050880514 业务主管看不到“待审视”状态数据，可以看到“待审视”之外的其它状态（如审视中、已审视）的数据
            ivo.setDeclareStatus(CANREAD_DECLARESTATUS);
            String[] declareRoleList = ivo.getRoleNames().split("\\|");
            if (declareRoleList != null && declareRoleList.length > 0) {
                for (String declareRole : declareRoleList) {
                    if (declareRole.equals("一键申报服务管理员")) {
                        ivo.setBusinessDirector("");
                        // 一键申报服务管理员所有类型审视状态的数据都可以看
                        ivo.setDeclareStatus("");
                        break;
                    }
                }
            }
            List<HrDeclareCalcVO> list = hrDeclareDao.findList();
            List<HrDeclareCalcVO> decryList = HrDeclareQueryCondition.query(list, ivo);
            pageVO.setTotalRows(decryList.size());
            List<HrDeclareCalcVO> splitList = HrDeclareQueryCondition.orderAndSplit(decryList, curPage, pageSize);
            List<HrDeclareCalcVO> resultList = new ArrayList<>();
            if (!CollectionUtils.isEmpty(splitList)) {
                List<HrDeclareCalcVO> calcSplitList = hrDeclareDao.findCalc(splitList);
                resultList = set(calcSplitList, splitList);
            }
            // 需要填充数据
            result.setResult(resultList);
            result.setPageVO(pageVO);

        } catch (RuntimeException runtimeException) {
            LogUtil.error("Failed to query findHrDeclareCalcPageList details.", runtimeException);
        }
        return result;
    }

    private List<HrDeclareCalcVO> set(List<HrDeclareCalcVO> calcSplitList, List<HrDeclareCalcVO> splitList) {
        List<HrDeclareCalcVO> result = new ArrayList<>();
        for (HrDeclareCalcVO hvo : splitList) {
            String workNo = hvo.getWorkNo();
            HrDeclareCalcVO hvv = hvo;
            for (HrDeclareCalcVO hdo : calcSplitList) {
                if (workNo.equals(hdo.getWorkNo())) {
                    hvv.setTotal(hdo.getTotal());
                    hvv.setAllIllegalCount(hdo.getAllIllegalCount());
                    hvv.setRiskLevel(hdo.getRiskLevel());
                    hvv.setIntrusiveRisk(hdo.getIntrusiveRisk());
                    hvv.setIsKeySysAuth(hdo.getIsKeySysAuth());
                    hvv.setCtrlsup(hdo.getCtrlsup());
                    break;
                }
            }
            result.add(hvv);
        }
        return result;
    }

    @Override
    @JalorOperation(code = "batchDeclare", desc = "批量提交申报信息")
    public ResultVo<Object> batchDeclare(List<HrDeclareVO> hrDeclareVOList) throws ApplicationException {
        try {
            PortraitDetailVO portraitDetailVO = new PortraitDetailVO();
            if (CollectionUtils.isNotEmpty(hrDeclareVOList)) {
                List<String> collect = hrDeclareVOList.stream()
                    .map(HrDeclareVO::getWorkNo)
                    .collect(Collectors.toList());
                portraitDetailVO.setEmployeeIds(collect);
                List<PortraitDetailVO> portraitDetail = portraitDetailDao.getPortraitDetail(portraitDetailVO);
                List<ChangedPersonnelVO> cos = new ArrayList<>();
                String taskId = UUID.randomUUID().toString();
                hrDeclareVOList.stream().forEach(hrVo -> {
                    String workNo = hrVo.getWorkNo();
                    hrVo.setDeclareStatus("TBR");
                    constructHv(portraitDetail, hrVo, workNo);
                    ChangedPersonnelVO changedPersonnelVO = new ChangedPersonnelVO(taskId, hrVo.getWorkNo(),
                        hrVo.getDeclarePerson(), hrVo.getDeclareTime(), "HR");
                    changedPersonnelVO.setApplyTime(DateUtil.dateToString(new Date(), "yyyy-MM-dd HH:mm:ss"));
                    changedPersonnelVO.setLastUpdatePerson(hrVo.getDeclarePerson());
                    cos.add(changedPersonnelVO);
                });
                // hrDeclareVOList需要加密
                hrDeclareDao.saveOrUpdate(HrDeclareQueryCondition.encrylistH(hrDeclareVOList));
                // 需要在异动人员表添加一条记录
                changedPersonDao.batchSave(cos);
            }
        } catch (Exception exception) {
            LogUtil.error("Failed", exception);
            return new ResultVo<Object>(false, "batchDeclare failed", "batchDeclare failed");
        }
        return new ResultVo<Object>(true, "batchDeclare success", "batchDeclare success");
    }

    @Override
    public ResultVo<Object> encryptData(int type) throws ApplicationException {
        try {
            List<HrDeclareCalcVO> list = hrDeclareDao.findHistoryList();
            hrDeclareDao.tempSaveOrUpdate(HrDeclareQueryCondition.encrylist(list));
        } catch (Exception exception) {
            LogUtil.error("encryptData failed", exception);
            return new ResultVo<Object>(false, "encryptData failed", "encryptData failed");
        }
        return new ResultVo<Object>(true, "encryptData success", "encryptData success");
    }

    @Override
    public ResultVo<Object> getJ2cValue(String key) {
        try {
            return new ResultVo<Object>(true, HrDeclareQueryCondition.getJ2c(key), "getJ2cValue success");
        } catch (Exception exception) {
            LogUtil.error("getJ2cValue", exception);
            return new ResultVo<Object>(false, key, "getJ2cValue failed");
        }
    }

    @Override
    public ResultVo getAssessmentCycle() {
        return new ResultVo(true, hrDeclareDao.getAssessmentCycle(), "success");
    }

    @Override
    public ResultVo getAssessmentType() {
        return new ResultVo(true, hrDeclareDao.getAssessmentType(), "success");
    }

    @Override
    public ResultVo commitBusinessDirector(List<HrDeclareCalcVO> data) {
        try {
            for (int i = 0; i <data.size() ; i++) {
                if (!StringUtil.isNullOrEmpty(data.get(i).getId())){
                    HrDeclareCalcVO hrDeclareCalcVO = data.get(i);
                    // 提交给主管，审视状态为待审视
                    hrDeclareCalcVO.setDeclareStatus("REVIEWING");
                    hrDeclareDao.updateById(hrDeclareCalcVO);
                }
            }
            return new ResultVo(true, "success");
        } catch (Exception exception) {
            return new ResultVo(false, "error");
        }
    }

    @Override
    public ResultVo noticeBusinessDirector(List<String> w3c) {
        try {
            if (CollectionUtil.isNullOrEmpty(w3c)) {
                return new ResultVo(false, "error");
            }
            // 给业务主管推送应用号消息
            StringJoiner businessDirectorsStr = new StringJoiner(",");
            w3c.stream()
                .distinct()
                .collect(Collectors.toList())
                .forEach(data -> businessDirectorsStr.add(data));
            doPush(businessDirectorsStr.toString());
            return new ResultVo(true, "success");
        } catch (Exception exception) {
            return new ResultVo(false, "error");
        }
    }

    @Override
    public HrDeclareCalcVO getLastUpdateTime(HrDeclareCalcVO vo) {
        return hrDeclareDao.getLastUpdateTime(vo);
    }

    @Override
    public List<HrDeclareCalcVO> getProcessStatus() {
        return hrDeclareDao.getProcessStatus();
    }

    @Override
    public ResultVo<Object> getBusinessDirectorNames(List<HrDeclareCalcVO> vos) {
        ResultVo result = new ResultVo(true,"success");
        try {
            List<Map<String, String>> businessDirectorNames = hrDeclareDao.getBusinessDirectorNames(vos);
            Map <String, String> map = new HashMap<>();
            for (Map<String, String> item:businessDirectorNames) {
                map.put(item.get("employeeId"),item.get("employeeName"));
                map.put(item.get("employeeId")+"_w3c",item.get("employeeW3"));
            }
            result.setResult(map);
        } catch (Exception exception) {
            result.setMessage("error");
            result.setResult(new HashMap<>());
        }
        return result;
    }

    private void constructHv(List<PortraitDetailVO> portraitDetail, HrDeclareVO hrDeclareVO, String workNo) {
        for (PortraitDetailVO portraitDetailVO : portraitDetail) {
            String employeeId = portraitDetailVO.getEmployeeId();
            if (employeeId.equalsIgnoreCase(workNo)) {
                hrDeclareVO.setDeptName(portraitDetailVO.getDeptName());
                hrDeclareVO.setDeptNameL1(portraitDetailVO.getDeptNameL1());
                hrDeclareVO.setDeptNameL2(portraitDetailVO.getDeptNameL2());
                hrDeclareVO.setDeptNameL3(portraitDetailVO.getDeptNameL3());
                hrDeclareVO.setDeptNameL4(portraitDetailVO.getDeptNameL4());
                hrDeclareVO.setFullDeptName(portraitDetailVO.getDeptAllName());
                break;
            }
        }
    }

    /**
     * 推送应用号
     *
     * @param receivePerson 接受人
     */
    private void doPush(String receivePerson) {
        try {
            ResultVo<Object> messagePushData = messagePushService.getMessagePushData("MessageTemplate",
                "businessReview");
            Object result = messagePushData.getResult();
            JSONObject jsonObject = JSON.parseObject((String) result);
            MessagePushVO messageVo = new MessagePushVO();
            messageVo.setUrl(jsonObject.getString("url"));
            messageVo.setSendPerson("system");
            messageVo.setId(String.valueOf(new Date().getTime()));
            messageVo.setPushType("6");
            messageVo.setSendTime(new Date());
            messageVo.setContent(jsonObject.getString("content"));
            messageVo.setTitle(jsonObject.getString("title"));
            // 给所有初始化的hr都要推送消息
            messageVo.setReceivePerson(receivePerson);
            messageVo.setSendLog("业务主管审视");
            messagePushService.saveMessagePush(messageVo);
        } catch (ApplicationException appException) {
            LogUtil.error("error getMessagePushData", appException);
        }
    }
}

